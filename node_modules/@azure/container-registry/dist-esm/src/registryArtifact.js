// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import "@azure/core-paging";
import { tracingClient } from "./tracing";
import { extractNextLink, isDigest } from "./utils/helpers";
import { toArtifactManifestProperties, toServiceTagOrderBy } from "./transformations";
/**
 * The client class used to interact with the Container Registry service.
 * @internal
 */
export class RegistryArtifactImpl {
    /**
     * Creates an instance of a RegistryArtifact.
     * @param registryEndpoint - the URL to the Container Registry endpoint
     * @param repositoryName - the name of the repository
     * @param tagOrDigest - the tag or digest of this artifact
     * @param client - the generated client that interacts with service
     */
    constructor(registryEndpoint, repositoryName, tagOrDigest, client) {
        this.tagOrDigest = tagOrDigest;
        this.registryEndpoint = registryEndpoint;
        this.repositoryName = repositoryName;
        const parsedUrl = new URL(registryEndpoint);
        if (isDigest(tagOrDigest)) {
            this.digest = tagOrDigest;
            this.fullyQualifiedReference = `${parsedUrl.hostname}/${repositoryName}@${this.digest}`;
        }
        else {
            this.fullyQualifiedReference = `${parsedUrl.hostname}/${repositoryName}:${tagOrDigest}`;
        }
        this.client = client;
    }
    /**
     * digest of this artifact.
     */
    async getDigest() {
        if (this.digest) {
            return this.digest;
        }
        if (!isDigest(this.tagOrDigest)) {
            this.digest = (await this.getTagProperties(this.tagOrDigest)).digest;
        }
        else {
            this.digest = this.tagOrDigest;
        }
        return this.digest;
    }
    /**
     * Deletes this registry artifact by deleting its manifest.
     * @param options -
     */
    async delete(options = {}) {
        return tracingClient.withSpan("RegistryArtifactImpl.delete", options, async (updatedOptions) => {
            await this.client.containerRegistry.deleteManifest(this.repositoryName, await this.getDigest(), updatedOptions);
        });
    }
    /**
     * Deletes a tag. This removes the tag from the artifact and its manifest.
     * @param tag - the name of the tag to delete.
     * @param options -
     */
    async deleteTag(tag, options = {}) {
        if (!tag) {
            throw new Error("invalid tag");
        }
        return tracingClient.withSpan("RegistryArtifactImpl.deleteTag", options, async (updatedOptions) => {
            await this.client.containerRegistry.deleteTag(this.repositoryName, tag, updatedOptions);
        });
    }
    /**
     * Retrieves the properties of the manifest that uniquely identifies this artifact.
     * @param options -
     */
    async getManifestProperties(options = {}) {
        return tracingClient.withSpan("RegistryArtifactImpl.getManifestProperties", options, async (updatedOptions) => {
            const result = await this.client.containerRegistry.getManifestProperties(this.repositoryName, await this.getDigest(), updatedOptions);
            return toArtifactManifestProperties(result, this.repositoryName, result.registryLoginServer);
        });
    }
    /**
     * Updates the properties of the artifact's manifest.
     *
     * Example usage:
     *
     * ```javascript
     * const client = new ContainerRegistryClient(url, credential);
     * const artifact = client.getArtifact(repositoryName, artifactTagOrDigest)
     * const updated = await artifact.updateManifestProperties({
     *   canDelete: false,
     *   canList: false,
     *   canRead: false,
     *   canWrite: false
     * });
     * ```
     * @param options -
     */
    async updateManifestProperties(options) {
        return tracingClient.withSpan("RegistryArtifactImpl.updateManifestProperties", Object.assign(Object.assign({}, options), { value: {
                canDelete: options.canDelete,
                canWrite: options.canWrite,
                canList: options.canList,
                canRead: options.canRead,
            } }), async (updatedOptions) => {
            const result = await this.client.containerRegistry.updateManifestProperties(this.repositoryName, await this.getDigest(), updatedOptions);
            return toArtifactManifestProperties(result, this.repositoryName, result.registryLoginServer);
        });
    }
    /**
     * Retrieves the properties of the specified tag.
     * @param tag - the tag to retrieve properties.
     * @param options -
     */
    async getTagProperties(tag, options = {}) {
        if (!tag) {
            throw new Error("invalid tag");
        }
        return tracingClient.withSpan("RegistryArtifactImpl.getTagProperties", options, (updatedOptions) => {
            return this.client.containerRegistry.getTagProperties(this.repositoryName, tag, updatedOptions);
        });
    }
    /**
     * Updates the properties of a given tag.
     *
     * Example usage:
     *
     * ```javascript
     * const client = new ContainerRegistryClient(url, credential);
     * const artifact = client.getArtifact(repositoryName, artifactTagOrDigest)
     * const updated = await artifact.updateTagProperties(tag, {
     *   canDelete: false,
     *   canList: false,
     *   canRead: false,
     *   canWrite: false
     * });
     * ```
     * @param tag - name of the tag to update properties on
     * @param options -
     */
    async updateTagProperties(tag, options) {
        if (!tag) {
            throw new Error("invalid tag");
        }
        return tracingClient.withSpan("RegistryArtifactImpl.updateTagProperties", Object.assign(Object.assign({}, options), { value: {
                canDelete: options.canDelete,
                canWrite: options.canWrite,
                canList: options.canList,
                canRead: options.canRead,
            } }), (updatedOptions) => {
            return this.client.containerRegistry.updateTagAttributes(this.repositoryName, tag, updatedOptions);
        });
    }
    /**
     * Returns an async iterable iterator to list the tags that uniquely identify this artifact and the properties of each.
     *
     * Example using `for-await-of` syntax:
     *
     * ```javascript
     * const client = new ContainerRegistryClient(url, credentials);
     * const repository = client.getRepository(repositoryName);
     * const artifact = repository.getArtifact(digest)
     * for await (const tag of artifact.listTagProperties()) {
     *   console.log("tag: ", tag);
     * }
     * ```
     *
     * Example using `iter.next()`:
     *
     * ```javascript
     * const iter = artifact.listTagProperties();
     * let item = await iter.next();
     * while (!item.done) {
     *   console.log("tag properties: ", item.value);
     *   item = await iter.next();
     * }
     * ```
     *
     * Example using `byPage()`:
     *
     * ```javascript
     * const pages = artifact.listTagProperties().byPage({ maxPageSize: 2 });
     * let page = await pages.next();
     * let i = 1;
     * while (!page.done) {
     *  if (page.value) {
     *    console.log(`-- page ${i++}`);
     *    for (const tagProperties of page.value) {
     *      console.log(`  repository name: ${tagProperties}`);
     *    }
     *  }
     *  page = await pages.next();
     * }
     * ```
     * @param options -
     */
    listTagProperties(options = {}) {
        const iter = this.listTagsItems(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings = {}) => this.listTagsPage(settings, options),
        };
    }
    listTagsItems(options = {}) {
        return __asyncGenerator(this, arguments, function* listTagsItems_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listTagsPage({}, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    listTagsPage(continuationState, options = {}) {
        return __asyncGenerator(this, arguments, function* listTagsPage_1() {
            const orderby = toServiceTagOrderBy(options.order);
            if (!continuationState.continuationToken) {
                const optionsComplete = Object.assign(Object.assign({}, options), { n: continuationState.maxPageSize, orderby });
                const currentPage = yield __await(this.client.containerRegistry.getTags(this.repositoryName, optionsComplete));
                continuationState.continuationToken = extractNextLink(currentPage.link);
                if (currentPage.tagAttributeBases) {
                    const array = currentPage.tagAttributeBases.map((t) => {
                        return Object.assign({ registryLoginServer: currentPage.registryLoginServer, repositoryName: currentPage.repository }, t);
                    });
                    yield yield __await(Object.defineProperty(array, "continuationToken", {
                        value: continuationState.continuationToken,
                        enumerable: true,
                    }));
                }
            }
            while (continuationState.continuationToken) {
                const currentPage = yield __await(this.client.containerRegistry.getTagsNext(this.repositoryName, continuationState.continuationToken, options));
                continuationState.continuationToken = extractNextLink(currentPage.link);
                if (currentPage.tagAttributeBases) {
                    const array = currentPage.tagAttributeBases.map((t) => {
                        return Object.assign({ registryLoginServer: currentPage.registryLoginServer, repositoryName: currentPage.repository }, t);
                    });
                    yield yield __await(Object.defineProperty(array, "continuationToken", {
                        value: continuationState.continuationToken,
                        enumerable: true,
                    }));
                }
            }
        });
    }
}
//# sourceMappingURL=registryArtifact.js.map