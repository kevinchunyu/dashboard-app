{"version":3,"file":"models.js","sourceRoot":"","sources":["../../../src/content/models.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AA4KlC;;GAEG;AACH,MAAM,CAAN,IAAY,sBAUX;AAVD,WAAY,sBAAsB;IAChC;;OAEG;IACH,yFAA+D,CAAA;IAE/D;;OAEG;IACH,iGAAuE,CAAA;AACzE,CAAC,EAVW,sBAAsB,KAAtB,sBAAsB,QAUjC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationOptions } from \"@azure/core-client\";\n\n/**\n * Options for configuring the upload manifest operation.\n */\nexport interface SetManifestOptions extends OperationOptions {\n  /**\n   * Media type of the uploaded manifest\n   */\n  mediaType?: string;\n\n  /**\n   * Tag to give the uploaded manifest\n   */\n  tag?: string;\n}\n\n/**\n * The result from uploading a blob to the registry.\n */\nexport interface UploadBlobResult {\n  /**\n   * The digest of the uploaded blob.\n   */\n  digest: string;\n\n  /**\n   * The size of the uploaded blob in bytes.\n   */\n  sizeInBytes: number;\n}\n\n/**\n * The result from downloading a manifest from the registry.\n */\nexport interface GetManifestResult {\n  /**\n   * The digest of the downloaded manifest as calculated by the registry.\n   */\n  digest: string;\n\n  /**\n   * Media type of the downloaded manifest as indicated by the Content-Type response header.\n   */\n  mediaType: string;\n\n  /**\n   * The raw content of the manifest that was downloaded.\n   */\n  content: Buffer;\n\n  /**\n   * The deserialized manifest\n   */\n  manifest: Record<string, unknown>;\n}\n\n/**\n * The result from downloading a blob from the registry.\n */\nexport interface DownloadBlobResult {\n  /**\n   * The blob's digest, calculated by the resgistry.\n   */\n  digest: string;\n\n  /**\n   * The blob content.\n   */\n  content: NodeJS.ReadableStream;\n}\n\n/**\n * The result from uploading a manifest to the registry.\n */\nexport interface SetManifestResult {\n  /**\n   * The digest of the uploaded manifest, calculated by the registry.\n   */\n  digest: string;\n}\n\n/** Docker V2 image layer descriptor including config and layers. */\nexport interface OciDescriptor {\n  /** Layer media type */\n  mediaType: string;\n  /** Layer size */\n  size: number;\n  /** Layer digest */\n  digest: string;\n  /** Specifies a list of URIs from which this object may be downloaded. */\n  urls?: string[];\n  /** Additional information provided through arbitrary metadata. */\n  annotations?: OciAnnotations;\n}\n\n/**\n * Type representing an OCI image manifest (manifest of media type \"application/vnd.oci.image.manifest.v1+json\").\n * See the specification at https://github.com/opencontainers/image-spec/blob/main/manifest.md for more information.\n */\nexport type OciImageManifest = {\n  /** Schema version */\n  schemaVersion: 2;\n  /** The media type, when used, must be application/vnd.oci.image.manifest.v1+json. */\n  mediaType?: `${KnownManifestMediaType.OciImageManifest}`;\n  /** When the manifest is used for an artifact, the type of said artifact. */\n  artifactType?: string;\n  /** V2 image config descriptor */\n  config: OciDescriptor;\n  /** List of V2 image layer information */\n  layers: OciDescriptor[];\n  /** Additional information provided through arbitrary metadata. */\n  annotations?: OciAnnotations;\n};\n\n/** Additional information provided through arbitrary metadata.\n * See the specification at https://github.com/opencontainers/image-spec/blob/main/annotations.md for more information.\n */\nexport interface OciAnnotations extends Record<string, unknown> {\n  /** Date and time on which the image was built (string, date-time as defined by https://tools.ietf.org/html/rfc3339#section-5.6) */\n  \"org.opencontainers.image.created\"?: string;\n  /** Contact details of the people or organization responsible for the image. */\n  \"org.opencontainers.image.authors\"?: string;\n  /** URL to find more information on the image. */\n  \"org.opencontainers.image.url\"?: string;\n  /** URL to get documentation on the image. */\n  \"org.opencontainers.image.documentation\"?: string;\n  /** URL to get source code for building the image. */\n  \"org.opencontainers.image.source\"?: string;\n  /** Version of the packaged software. The version MAY match a label or tag in the source code repository, may also be Semantic versioning-compatible */\n  \"org.opencontainers.image.version\"?: string;\n  /** Source control revision identifier for the packaged software. */\n  \"org.opencontainers.image.revision\"?: string;\n  /** Name of the distributing entity, organization or individual. */\n  \"org.opencontainers.image.vendor\"?: string;\n  /** License(s) under which contained software is distributed as an SPDX License Expression. */\n  \"org.opencontainers.image.licenses\"?: string;\n  /** Name of the reference for a target. */\n  \"org.opencontainers.image.ref.name\"?: string;\n  /** Human-readable title of the image */\n  \"org.opencontainers.image.title\"?: string;\n  /** Human-readable description of the software packaged in the image */\n  \"org.opencontainers.image.description\"?: string;\n}\n\n/**\n * Options for confguring the delete blob operation.\n */\nexport interface DeleteBlobOptions extends OperationOptions {}\n\n/**\n * Options for confguring the delete manifest operation.\n */\nexport interface DeleteManifestOptions extends OperationOptions {}\n\n/**\n * Options for configuring the upload blob operation.\n */\nexport interface UploadBlobOptions extends OperationOptions {}\n\n/**\n * Options for confguring the download blob operation.\n */\nexport interface DownloadBlobOptions extends OperationOptions {}\n\n/**\n * Options for confguring the download manifest operation.\n */\nexport interface GetManifestOptions extends OperationOptions {}\n\n/**\n * Known media type values for Docker and OCI manifests.\n */\nexport enum KnownManifestMediaType {\n  /**\n   * The media type for an OCI image manifest. This format is described at https://github.com/opencontainers/image-spec/blob/main/manifest.md.\n   */\n  OciImageManifest = \"application/vnd.oci.image.manifest.v1+json\",\n\n  /**\n   * The media type for a Docker Image Manifest, Version 2, Schema 2. This format is described at https://docs.docker.com/registry/spec/manifest-v2-2/.\n   */\n  DockerManifest = \"application/vnd.docker.distribution.manifest.v2+json\",\n}\n"]}