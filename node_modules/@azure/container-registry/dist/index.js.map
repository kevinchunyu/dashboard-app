{"version":3,"file":"index.js","sources":["../src/logger.ts","../src/generated/models/mappers.ts","../src/generated/models/parameters.ts","../src/generated/operations/containerRegistry.ts","../src/generated/operations/containerRegistryBlob.ts","../src/generated/operations/authentication.ts","../src/generated/generatedClient.ts","../src/constants.ts","../src/tracing.ts","../src/utils/helpers.ts","../src/utils/wwwAuthenticateParser.ts","../src/utils/tokenCycler.ts","../src/containerRegistryChallengeHandler.ts","../src/transformations.ts","../src/registryArtifact.ts","../src/containerRepository.ts","../src/utils/base64.ts","../src/containerRegistryTokenCredential.ts","../src/containerRegistryClient.ts","../src/models.ts","../src/content/models.ts","../src/utils/digest.ts","../src/utils/retriableReadableStream.ts","../src/content/containerRegistryContentClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\n\n/**\n * The \\@azure/logger configuration for this package.\n *\n * @internal\n */\nexport const logger = createClientLogger(\"container-registry\");\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\nexport const AcrErrors: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AcrErrors\",\n    modelProperties: {\n      errors: {\n        serializedName: \"errors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"AcrErrorInfo\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const AcrErrorInfo: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AcrErrorInfo\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      },\n      detail: {\n        serializedName: \"detail\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const Repositories: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Repositories\",\n    modelProperties: {\n      repositories: {\n        serializedName: \"repositories\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      link: {\n        serializedName: \"link\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRepositoryProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRepositoryProperties\",\n    modelProperties: {\n      registryLoginServer: {\n        serializedName: \"registry\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"imageName\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      createdOn: {\n        serializedName: \"createdTime\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      lastUpdatedOn: {\n        serializedName: \"lastUpdateTime\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      manifestCount: {\n        serializedName: \"manifestCount\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      tagCount: {\n        serializedName: \"tagCount\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      canDelete: {\n        serializedName: \"changeableAttributes.deleteEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      canWrite: {\n        serializedName: \"changeableAttributes.writeEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      canList: {\n        serializedName: \"changeableAttributes.listEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      canRead: {\n        serializedName: \"changeableAttributes.readEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const RepositoryWriteableProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RepositoryWriteableProperties\",\n    modelProperties: {\n      canDelete: {\n        serializedName: \"deleteEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      canWrite: {\n        serializedName: \"writeEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      canList: {\n        serializedName: \"listEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      canRead: {\n        serializedName: \"readEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const TagList: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TagList\",\n    modelProperties: {\n      registryLoginServer: {\n        serializedName: \"registry\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      repository: {\n        serializedName: \"imageName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      tagAttributeBases: {\n        serializedName: \"tags\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TagAttributesBase\"\n            }\n          }\n        }\n      },\n      link: {\n        serializedName: \"link\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TagAttributesBase: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TagAttributesBase\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      digest: {\n        serializedName: \"digest\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      createdOn: {\n        serializedName: \"createdTime\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      lastUpdatedOn: {\n        serializedName: \"lastUpdateTime\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      canDelete: {\n        serializedName: \"changeableAttributes.deleteEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      canWrite: {\n        serializedName: \"changeableAttributes.writeEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      canList: {\n        serializedName: \"changeableAttributes.listEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      canRead: {\n        serializedName: \"changeableAttributes.readEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const TagWriteableProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TagWriteableProperties\",\n    modelProperties: {\n      canDelete: {\n        serializedName: \"deleteEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      canWrite: {\n        serializedName: \"writeEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      canList: {\n        serializedName: \"listEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      canRead: {\n        serializedName: \"readEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const ArtifactTagProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ArtifactTagProperties\",\n    modelProperties: {\n      registryLoginServer: {\n        serializedName: \"registry\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      repositoryName: {\n        serializedName: \"imageName\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"tag.name\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      digest: {\n        serializedName: \"tag.digest\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      createdOn: {\n        serializedName: \"tag.createdTime\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      lastUpdatedOn: {\n        serializedName: \"tag.lastUpdateTime\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      canDelete: {\n        serializedName: \"tag.changeableAttributes.deleteEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      canWrite: {\n        serializedName: \"tag.changeableAttributes.writeEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      canList: {\n        serializedName: \"tag.changeableAttributes.listEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      canRead: {\n        serializedName: \"tag.changeableAttributes.readEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const AcrManifests: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AcrManifests\",\n    modelProperties: {\n      registryLoginServer: {\n        serializedName: \"registry\",\n        type: {\n          name: \"String\"\n        }\n      },\n      repository: {\n        serializedName: \"imageName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      manifests: {\n        serializedName: \"manifests\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ManifestAttributesBase\"\n            }\n          }\n        }\n      },\n      link: {\n        serializedName: \"link\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ManifestAttributesBase: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ManifestAttributesBase\",\n    modelProperties: {\n      digest: {\n        serializedName: \"digest\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      size: {\n        serializedName: \"imageSize\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      createdOn: {\n        serializedName: \"createdTime\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      lastUpdatedOn: {\n        serializedName: \"lastUpdateTime\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      architecture: {\n        serializedName: \"architecture\",\n        readOnly: true,\n        nullable: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      operatingSystem: {\n        serializedName: \"os\",\n        readOnly: true,\n        nullable: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      relatedArtifacts: {\n        serializedName: \"references\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ArtifactManifestPlatform\"\n            }\n          }\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      canDelete: {\n        serializedName: \"changeableAttributes.deleteEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      canWrite: {\n        serializedName: \"changeableAttributes.writeEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      canList: {\n        serializedName: \"changeableAttributes.listEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      canRead: {\n        serializedName: \"changeableAttributes.readEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const ArtifactManifestPlatform: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ArtifactManifestPlatform\",\n    modelProperties: {\n      digest: {\n        serializedName: \"digest\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      architecture: {\n        serializedName: \"architecture\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      operatingSystem: {\n        serializedName: \"os\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ManifestWriteableProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ManifestWriteableProperties\",\n    modelProperties: {\n      canDelete: {\n        serializedName: \"deleteEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      canWrite: {\n        serializedName: \"writeEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      canList: {\n        serializedName: \"listEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      canRead: {\n        serializedName: \"readEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const ArtifactManifestProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ArtifactManifestProperties\",\n    modelProperties: {\n      registryLoginServer: {\n        serializedName: \"registry\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      repositoryName: {\n        serializedName: \"imageName\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      digest: {\n        serializedName: \"manifest.digest\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      size: {\n        serializedName: \"manifest.imageSize\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      createdOn: {\n        serializedName: \"manifest.createdTime\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      lastUpdatedOn: {\n        serializedName: \"manifest.lastUpdateTime\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      architecture: {\n        serializedName: \"manifest.architecture\",\n        readOnly: true,\n        nullable: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      operatingSystem: {\n        serializedName: \"manifest.os\",\n        readOnly: true,\n        nullable: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      relatedArtifacts: {\n        serializedName: \"manifest.references\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ArtifactManifestPlatform\"\n            }\n          }\n        }\n      },\n      tags: {\n        serializedName: \"manifest.tags\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      canDelete: {\n        serializedName: \"manifest.changeableAttributes.deleteEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      canWrite: {\n        serializedName: \"manifest.changeableAttributes.writeEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      canList: {\n        serializedName: \"manifest.changeableAttributes.listEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      canRead: {\n        serializedName: \"manifest.changeableAttributes.readEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const AcrRefreshToken: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AcrRefreshToken\",\n    modelProperties: {\n      refreshToken: {\n        serializedName: \"refresh_token\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AcrAccessToken: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AcrAccessToken\",\n    modelProperties: {\n      accessToken: {\n        serializedName: \"access_token\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RepositoryTags: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RepositoryTags\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ImageSignature: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ImageSignature\",\n    modelProperties: {\n      header: {\n        serializedName: \"header\",\n        type: {\n          name: \"Composite\",\n          className: \"Jwk\"\n        }\n      },\n      signature: {\n        serializedName: \"signature\",\n        type: {\n          name: \"String\"\n        }\n      },\n      protected: {\n        serializedName: \"protected\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Jwk: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Jwk\",\n    modelProperties: {\n      jwk: {\n        serializedName: \"jwk\",\n        type: {\n          name: \"Composite\",\n          className: \"JWKHeader\"\n        }\n      },\n      alg: {\n        serializedName: \"alg\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const JWKHeader: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"JWKHeader\",\n    modelProperties: {\n      crv: {\n        serializedName: \"crv\",\n        type: {\n          name: \"String\"\n        }\n      },\n      kid: {\n        serializedName: \"kid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      kty: {\n        serializedName: \"kty\",\n        type: {\n          name: \"String\"\n        }\n      },\n      x: {\n        serializedName: \"x\",\n        type: {\n          name: \"String\"\n        }\n      },\n      y: {\n        serializedName: \"y\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const History: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"History\",\n    modelProperties: {\n      v1Compatibility: {\n        serializedName: \"v1Compatibility\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeleteRepositoryResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DeleteRepositoryResult\",\n    modelProperties: {\n      deletedManifests: {\n        serializedName: \"manifestsDeleted\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      deletedTags: {\n        serializedName: \"tagsDeleted\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const FsLayer: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FsLayer\",\n    modelProperties: {\n      blobSum: {\n        serializedName: \"blobSum\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Descriptor: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Descriptor\",\n    modelProperties: {\n      mediaType: {\n        serializedName: \"mediaType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      size: {\n        serializedName: \"size\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      digest: {\n        serializedName: \"digest\",\n        type: {\n          name: \"String\"\n        }\n      },\n      urls: {\n        serializedName: \"urls\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      annotations: {\n        serializedName: \"annotations\",\n        type: {\n          name: \"Composite\",\n          className: \"Annotations\"\n        }\n      }\n    }\n  }\n};\n\nexport const Annotations: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Annotations\",\n    additionalProperties: { type: { name: \"Object\" } },\n    modelProperties: {\n      created: {\n        serializedName: \"org\\\\.opencontainers\\\\.image\\\\.created\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      authors: {\n        serializedName: \"org\\\\.opencontainers\\\\.image\\\\.authors\",\n        type: {\n          name: \"String\"\n        }\n      },\n      url: {\n        serializedName: \"org\\\\.opencontainers\\\\.image\\\\.url\",\n        type: {\n          name: \"String\"\n        }\n      },\n      documentation: {\n        serializedName: \"org\\\\.opencontainers\\\\.image\\\\.documentation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      source: {\n        serializedName: \"org\\\\.opencontainers\\\\.image\\\\.source\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"org\\\\.opencontainers\\\\.image\\\\.version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      revision: {\n        serializedName: \"org\\\\.opencontainers\\\\.image\\\\.revision\",\n        type: {\n          name: \"String\"\n        }\n      },\n      vendor: {\n        serializedName: \"org\\\\.opencontainers\\\\.image\\\\.vendor\",\n        type: {\n          name: \"String\"\n        }\n      },\n      licenses: {\n        serializedName: \"org\\\\.opencontainers\\\\.image\\\\.licenses\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"org\\\\.opencontainers\\\\.image\\\\.ref.name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      title: {\n        serializedName: \"org\\\\.opencontainers\\\\.image\\\\.title\",\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"org\\\\.opencontainers\\\\.image\\\\.description\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TagAttributesTag: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TagAttributesTag\",\n    modelProperties: {\n      signatureRecord: {\n        serializedName: \"signatureRecord\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ManifestAttributesManifest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ManifestAttributesManifest\",\n    modelProperties: {\n      references: {\n        serializedName: \"references\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ArtifactManifestPlatform\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Manifest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Manifest\",\n    modelProperties: {\n      schemaVersion: {\n        serializedName: \"schemaVersion\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const ManifestListAttributes: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ManifestListAttributes\",\n    modelProperties: {\n      mediaType: {\n        serializedName: \"mediaType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      size: {\n        serializedName: \"size\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      digest: {\n        serializedName: \"digest\",\n        type: {\n          name: \"String\"\n        }\n      },\n      platform: {\n        serializedName: \"platform\",\n        type: {\n          name: \"Composite\",\n          className: \"Platform\"\n        }\n      }\n    }\n  }\n};\n\nexport const Platform: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Platform\",\n    modelProperties: {\n      architecture: {\n        serializedName: \"architecture\",\n        type: {\n          name: \"String\"\n        }\n      },\n      os: {\n        serializedName: \"os\",\n        type: {\n          name: \"String\"\n        }\n      },\n      osVersion: {\n        serializedName: \"os\\\\.version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      osFeatures: {\n        serializedName: \"os\\\\.features\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      variant: {\n        serializedName: \"variant\",\n        type: {\n          name: \"String\"\n        }\n      },\n      features: {\n        serializedName: \"features\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const OCIManifest: coreClient.CompositeMapper = {\n  serializedName: \"application/vnd.oci.image.manifest.v1+json\",\n  type: {\n    name: \"Composite\",\n    className: \"OCIManifest\",\n    modelProperties: {\n      config: {\n        serializedName: \"config\",\n        type: {\n          name: \"Composite\",\n          className: \"Descriptor\"\n        }\n      },\n      layers: {\n        serializedName: \"layers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Descriptor\"\n            }\n          }\n        }\n      },\n      annotations: {\n        serializedName: \"annotations\",\n        type: {\n          name: \"Composite\",\n          className: \"Annotations\"\n        }\n      },\n      schemaVersion: {\n        serializedName: \"schemaVersion\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Paths108HwamOauth2ExchangePostRequestbodyContentApplicationXWwwFormUrlencodedSchema: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className:\n      \"Paths108HwamOauth2ExchangePostRequestbodyContentApplicationXWwwFormUrlencodedSchema\",\n    modelProperties: {\n      grantType: {\n        serializedName: \"grant_type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      service: {\n        serializedName: \"service\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      tenant: {\n        serializedName: \"tenant\",\n        type: {\n          name: \"String\"\n        }\n      },\n      refreshToken: {\n        serializedName: \"refresh_token\",\n        type: {\n          name: \"String\"\n        }\n      },\n      aadAccessToken: {\n        serializedName: \"access_token\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathsV3R3RxOauth2TokenPostRequestbodyContentApplicationXWwwFormUrlencodedSchema: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className:\n      \"PathsV3R3RxOauth2TokenPostRequestbodyContentApplicationXWwwFormUrlencodedSchema\",\n    modelProperties: {\n      service: {\n        serializedName: \"service\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      scope: {\n        serializedName: \"scope\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      acrRefreshToken: {\n        serializedName: \"refresh_token\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      grantType: {\n        serializedName: \"grant_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"refresh_token\", \"password\"]\n        }\n      }\n    }\n  }\n};\n\nexport const ManifestWrapper: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ManifestWrapper\",\n    modelProperties: {\n      ...Manifest.type.modelProperties,\n      mediaType: {\n        serializedName: \"mediaType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      manifests: {\n        serializedName: \"manifests\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ManifestListAttributes\"\n            }\n          }\n        }\n      },\n      config: {\n        serializedName: \"config\",\n        type: {\n          name: \"Composite\",\n          className: \"Descriptor\"\n        }\n      },\n      layers: {\n        serializedName: \"layers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Descriptor\"\n            }\n          }\n        }\n      },\n      annotations: {\n        serializedName: \"annotations\",\n        type: {\n          name: \"Composite\",\n          className: \"Annotations\"\n        }\n      },\n      architecture: {\n        serializedName: \"architecture\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tag: {\n        serializedName: \"tag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fsLayers: {\n        serializedName: \"fsLayers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"FsLayer\"\n            }\n          }\n        }\n      },\n      history: {\n        serializedName: \"history\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"History\"\n            }\n          }\n        }\n      },\n      signatures: {\n        serializedName: \"signatures\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImageSignature\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ManifestList: coreClient.CompositeMapper = {\n  serializedName: \"application/vnd.docker.distribution.manifest.list.v2+json\",\n  type: {\n    name: \"Composite\",\n    className: \"ManifestList\",\n    modelProperties: {\n      ...Manifest.type.modelProperties,\n      mediaType: {\n        serializedName: \"mediaType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      manifests: {\n        serializedName: \"manifests\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ManifestListAttributes\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const V2Manifest: coreClient.CompositeMapper = {\n  serializedName: \"application/vnd.docker.distribution.manifest.v2+json\",\n  type: {\n    name: \"Composite\",\n    className: \"V2Manifest\",\n    modelProperties: {\n      ...Manifest.type.modelProperties,\n      mediaType: {\n        serializedName: \"mediaType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      config: {\n        serializedName: \"config\",\n        type: {\n          name: \"Composite\",\n          className: \"Descriptor\"\n        }\n      },\n      layers: {\n        serializedName: \"layers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Descriptor\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const OCIIndex: coreClient.CompositeMapper = {\n  serializedName: \"application/vnd.oci.image.index.v1+json\",\n  type: {\n    name: \"Composite\",\n    className: \"OCIIndex\",\n    modelProperties: {\n      ...Manifest.type.modelProperties,\n      manifests: {\n        serializedName: \"manifests\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ManifestListAttributes\"\n            }\n          }\n        }\n      },\n      annotations: {\n        serializedName: \"annotations\",\n        type: {\n          name: \"Composite\",\n          className: \"Annotations\"\n        }\n      }\n    }\n  }\n};\n\nexport const V1Manifest: coreClient.CompositeMapper = {\n  serializedName: \"application/vnd.oci.image.manifest.v1+json\",\n  type: {\n    name: \"Composite\",\n    className: \"V1Manifest\",\n    modelProperties: {\n      ...Manifest.type.modelProperties,\n      architecture: {\n        serializedName: \"architecture\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tag: {\n        serializedName: \"tag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fsLayers: {\n        serializedName: \"fsLayers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"FsLayer\"\n            }\n          }\n        }\n      },\n      history: {\n        serializedName: \"history\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"History\"\n            }\n          }\n        }\n      },\n      signatures: {\n        serializedName: \"signatures\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImageSignature\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRegistryGetManifestHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRegistryGetManifestHeaders\",\n    modelProperties: {\n      dockerContentDigest: {\n        serializedName: \"docker-content-digest\",\n        type: {\n          name: \"String\"\n        }\n      },\n      mediaType: {\n        serializedName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRegistryCreateManifestHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRegistryCreateManifestHeaders\",\n    modelProperties: {\n      dockerContentDigest: {\n        serializedName: \"docker-content-digest\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLength: {\n        serializedName: \"content-length\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRegistryGetRepositoriesHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRegistryGetRepositoriesHeaders\",\n    modelProperties: {\n      link: {\n        serializedName: \"link\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRegistryGetTagsHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRegistryGetTagsHeaders\",\n    modelProperties: {\n      link: {\n        serializedName: \"link\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRegistryGetManifestsHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRegistryGetManifestsHeaders\",\n    modelProperties: {\n      link: {\n        serializedName: \"link\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRegistryGetRepositoriesNextHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRegistryGetRepositoriesNextHeaders\",\n    modelProperties: {\n      link: {\n        serializedName: \"link\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRegistryGetTagsNextHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRegistryGetTagsNextHeaders\",\n    modelProperties: {\n      link: {\n        serializedName: \"link\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRegistryGetManifestsNextHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRegistryGetManifestsNextHeaders\",\n    modelProperties: {\n      link: {\n        serializedName: \"link\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRegistryBlobGetBlobHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRegistryBlobGetBlobHeaders\",\n    modelProperties: {\n      contentLength: {\n        serializedName: \"content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      dockerContentDigest: {\n        serializedName: \"docker-content-digest\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRegistryBlobCheckBlobExistsHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRegistryBlobCheckBlobExistsHeaders\",\n    modelProperties: {\n      contentLength: {\n        serializedName: \"content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      dockerContentDigest: {\n        serializedName: \"docker-content-digest\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRegistryBlobDeleteBlobHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRegistryBlobDeleteBlobHeaders\",\n    modelProperties: {\n      dockerContentDigest: {\n        serializedName: \"docker-content-digest\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRegistryBlobMountBlobHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRegistryBlobMountBlobHeaders\",\n    modelProperties: {\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      },\n      dockerUploadUuid: {\n        serializedName: \"docker-upload-uuid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      dockerContentDigest: {\n        serializedName: \"docker-content-digest\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRegistryBlobGetUploadStatusHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRegistryBlobGetUploadStatusHeaders\",\n    modelProperties: {\n      range: {\n        serializedName: \"range\",\n        type: {\n          name: \"String\"\n        }\n      },\n      dockerUploadUuid: {\n        serializedName: \"docker-upload-uuid\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRegistryBlobUploadChunkHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRegistryBlobUploadChunkHeaders\",\n    modelProperties: {\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      },\n      range: {\n        serializedName: \"range\",\n        type: {\n          name: \"String\"\n        }\n      },\n      dockerUploadUuid: {\n        serializedName: \"docker-upload-uuid\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRegistryBlobCompleteUploadHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRegistryBlobCompleteUploadHeaders\",\n    modelProperties: {\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      },\n      range: {\n        serializedName: \"range\",\n        type: {\n          name: \"String\"\n        }\n      },\n      dockerContentDigest: {\n        serializedName: \"docker-content-digest\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRegistryBlobStartUploadHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRegistryBlobStartUploadHeaders\",\n    modelProperties: {\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      },\n      range: {\n        serializedName: \"range\",\n        type: {\n          name: \"String\"\n        }\n      },\n      dockerUploadUuid: {\n        serializedName: \"docker-upload-uuid\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRegistryBlobGetChunkHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRegistryBlobGetChunkHeaders\",\n    modelProperties: {\n      contentLength: {\n        serializedName: \"content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      contentRange: {\n        serializedName: \"content-range\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRegistryBlobCheckChunkExistsHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRegistryBlobCheckChunkExistsHeaders\",\n    modelProperties: {\n      contentLength: {\n        serializedName: \"content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      contentRange: {\n        serializedName: \"content-range\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter\n} from \"@azure/core-client\";\nimport {\n  RepositoryWriteableProperties as RepositoryWriteablePropertiesMapper,\n  TagWriteableProperties as TagWriteablePropertiesMapper,\n  ManifestWriteableProperties as ManifestWriteablePropertiesMapper\n} from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const url: OperationURLParameter = {\n  parameterPath: \"url\",\n  mapper: {\n    serializedName: \"url\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const name: OperationURLParameter = {\n  parameterPath: \"name\",\n  mapper: {\n    serializedName: \"name\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const reference: OperationURLParameter = {\n  parameterPath: \"reference\",\n  mapper: {\n    serializedName: \"reference\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const accept1: OperationParameter = {\n  parameterPath: [\"options\", \"accept\"],\n  mapper: {\n    serializedName: \"accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const payload: OperationParameter = {\n  parameterPath: \"payload\",\n  mapper: {\n    serializedName: \"payload\",\n    required: true,\n    type: {\n      name: \"Stream\"\n    }\n  }\n};\n\nexport const accept2: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const last: OperationQueryParameter = {\n  parameterPath: [\"options\", \"last\"],\n  mapper: {\n    serializedName: \"last\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const n: OperationQueryParameter = {\n  parameterPath: [\"options\", \"n\"],\n  mapper: {\n    serializedName: \"n\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const apiVersion: OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    serializedName: \"api-version\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentType1: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const value: OperationParameter = {\n  parameterPath: [\"options\", \"value\"],\n  mapper: RepositoryWriteablePropertiesMapper\n};\n\nexport const orderby: OperationQueryParameter = {\n  parameterPath: [\"options\", \"orderby\"],\n  mapper: {\n    serializedName: \"orderby\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const digest: OperationQueryParameter = {\n  parameterPath: [\"options\", \"digest\"],\n  mapper: {\n    serializedName: \"digest\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const value1: OperationParameter = {\n  parameterPath: [\"options\", \"value\"],\n  mapper: TagWriteablePropertiesMapper\n};\n\nexport const digest1: OperationURLParameter = {\n  parameterPath: \"digest\",\n  mapper: {\n    serializedName: \"digest\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const value2: OperationParameter = {\n  parameterPath: [\"options\", \"value\"],\n  mapper: ManifestWriteablePropertiesMapper\n};\n\nexport const nextLink: OperationURLParameter = {\n  parameterPath: \"nextLink\",\n  mapper: {\n    serializedName: \"nextLink\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const accept3: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/octet-stream\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const fromParam: OperationQueryParameter = {\n  parameterPath: \"fromParam\",\n  mapper: {\n    serializedName: \"from\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const mount: OperationQueryParameter = {\n  parameterPath: \"mount\",\n  mapper: {\n    serializedName: \"mount\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const nextLink1: OperationURLParameter = {\n  parameterPath: \"nextLink\",\n  mapper: {\n    serializedName: \"nextBlobUuidLink\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const contentType2: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/octet-stream\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const value3: OperationParameter = {\n  parameterPath: \"value\",\n  mapper: {\n    serializedName: \"value\",\n    required: true,\n    type: {\n      name: \"Stream\"\n    }\n  }\n};\n\nexport const value4: OperationParameter = {\n  parameterPath: [\"options\", \"value\"],\n  mapper: {\n    serializedName: \"value\",\n    type: {\n      name: \"Stream\"\n    }\n  }\n};\n\nexport const digest2: OperationQueryParameter = {\n  parameterPath: \"digest\",\n  mapper: {\n    serializedName: \"digest\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const range: OperationParameter = {\n  parameterPath: \"range\",\n  mapper: {\n    serializedName: \"Range\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentType3: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/x-www-form-urlencoded\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const grantType: OperationParameter = {\n  parameterPath: \"grantType\",\n  mapper: {\n    serializedName: \"grant_type\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const service: OperationParameter = {\n  parameterPath: \"service\",\n  mapper: {\n    serializedName: \"service\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const tenant: OperationParameter = {\n  parameterPath: [\"options\", \"tenant\"],\n  mapper: {\n    serializedName: \"tenant\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const refreshToken: OperationParameter = {\n  parameterPath: [\"options\", \"refreshToken\"],\n  mapper: {\n    serializedName: \"refresh_token\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const accessToken: OperationParameter = {\n  parameterPath: [\"options\", \"accessToken\"],\n  mapper: {\n    serializedName: \"access_token\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const accept4: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const scope: OperationParameter = {\n  parameterPath: \"scope\",\n  mapper: {\n    serializedName: \"scope\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const refreshToken1: OperationParameter = {\n  parameterPath: \"refreshToken\",\n  mapper: {\n    serializedName: \"refresh_token\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const grantType1: OperationParameter = {\n  parameterPath: \"grantType\",\n  mapper: {\n    serializedName: \"grant_type\",\n    required: true,\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"refresh_token\", \"password\"]\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { ContainerRegistry } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { GeneratedClient } from \"../generatedClient\";\nimport {\n  ContainerRegistryCheckDockerV2SupportOptionalParams,\n  ContainerRegistryGetManifestOptionalParams,\n  ContainerRegistryGetManifestResponse,\n  ContainerRegistryCreateManifestOptionalParams,\n  ContainerRegistryCreateManifestResponse,\n  ContainerRegistryDeleteManifestOptionalParams,\n  ContainerRegistryGetRepositoriesOptionalParams,\n  ContainerRegistryGetRepositoriesResponse,\n  ContainerRegistryGetPropertiesOptionalParams,\n  ContainerRegistryGetPropertiesResponse,\n  ContainerRegistryDeleteRepositoryOptionalParams,\n  ContainerRegistryUpdatePropertiesOptionalParams,\n  ContainerRegistryUpdatePropertiesResponse,\n  ContainerRegistryGetTagsOptionalParams,\n  ContainerRegistryGetTagsResponse,\n  ContainerRegistryGetTagPropertiesOptionalParams,\n  ContainerRegistryGetTagPropertiesResponse,\n  ContainerRegistryUpdateTagAttributesOptionalParams,\n  ContainerRegistryUpdateTagAttributesResponse,\n  ContainerRegistryDeleteTagOptionalParams,\n  ContainerRegistryGetManifestsOptionalParams,\n  ContainerRegistryGetManifestsResponse,\n  ContainerRegistryGetManifestPropertiesOptionalParams,\n  ContainerRegistryGetManifestPropertiesResponse,\n  ContainerRegistryUpdateManifestPropertiesOptionalParams,\n  ContainerRegistryUpdateManifestPropertiesResponse,\n  ContainerRegistryGetRepositoriesNextOptionalParams,\n  ContainerRegistryGetRepositoriesNextResponse,\n  ContainerRegistryGetTagsNextOptionalParams,\n  ContainerRegistryGetTagsNextResponse,\n  ContainerRegistryGetManifestsNextOptionalParams,\n  ContainerRegistryGetManifestsNextResponse\n} from \"../models\";\n\n/** Class containing ContainerRegistry operations. */\nexport class ContainerRegistryImpl implements ContainerRegistry {\n  private readonly client: GeneratedClient;\n\n  /**\n   * Initialize a new instance of the class ContainerRegistry class.\n   * @param client Reference to the service client\n   */\n  constructor(client: GeneratedClient) {\n    this.client = client;\n  }\n\n  /**\n   * Tells whether this Docker Registry instance supports Docker Registry HTTP API v2\n   * @param options The options parameters.\n   */\n  checkDockerV2Support(\n    options?: ContainerRegistryCheckDockerV2SupportOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { options },\n      checkDockerV2SupportOperationSpec\n    );\n  }\n\n  /**\n   * Get the manifest identified by `name` and `reference` where `reference` can be a tag or digest.\n   * @param name Name of the image (including the namespace)\n   * @param reference A tag or a digest, pointing to a specific image\n   * @param options The options parameters.\n   */\n  getManifest(\n    name: string,\n    reference: string,\n    options?: ContainerRegistryGetManifestOptionalParams\n  ): Promise<ContainerRegistryGetManifestResponse> {\n    return this.client.sendOperationRequest(\n      { name, reference, options },\n      getManifestOperationSpec\n    );\n  }\n\n  /**\n   * Put the manifest identified by `name` and `reference` where `reference` can be a tag or digest.\n   * @param name Name of the image (including the namespace)\n   * @param reference A tag or a digest, pointing to a specific image\n   * @param payload Manifest body, can take v1 or v2 values depending on accept header\n   * @param options The options parameters.\n   */\n  createManifest(\n    name: string,\n    reference: string,\n    payload: coreRestPipeline.RequestBodyType,\n    options?: ContainerRegistryCreateManifestOptionalParams\n  ): Promise<ContainerRegistryCreateManifestResponse> {\n    return this.client.sendOperationRequest(\n      { name, reference, payload, options },\n      createManifestOperationSpec\n    );\n  }\n\n  /**\n   * Delete the manifest identified by `name` and `reference`. Note that a manifest can _only_ be deleted\n   * by `digest`.\n   * @param name Name of the image (including the namespace)\n   * @param reference Digest of a BLOB\n   * @param options The options parameters.\n   */\n  deleteManifest(\n    name: string,\n    reference: string,\n    options?: ContainerRegistryDeleteManifestOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { name, reference, options },\n      deleteManifestOperationSpec\n    );\n  }\n\n  /**\n   * List repositories\n   * @param options The options parameters.\n   */\n  getRepositories(\n    options?: ContainerRegistryGetRepositoriesOptionalParams\n  ): Promise<ContainerRegistryGetRepositoriesResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      getRepositoriesOperationSpec\n    );\n  }\n\n  /**\n   * Get repository attributes\n   * @param name Name of the image (including the namespace)\n   * @param options The options parameters.\n   */\n  getProperties(\n    name: string,\n    options?: ContainerRegistryGetPropertiesOptionalParams\n  ): Promise<ContainerRegistryGetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      { name, options },\n      getPropertiesOperationSpec\n    );\n  }\n\n  /**\n   * Delete the repository identified by `name`\n   * @param name Name of the image (including the namespace)\n   * @param options The options parameters.\n   */\n  deleteRepository(\n    name: string,\n    options?: ContainerRegistryDeleteRepositoryOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { name, options },\n      deleteRepositoryOperationSpec\n    );\n  }\n\n  /**\n   * Update the attribute identified by `name` where `reference` is the name of the repository.\n   * @param name Name of the image (including the namespace)\n   * @param options The options parameters.\n   */\n  updateProperties(\n    name: string,\n    options?: ContainerRegistryUpdatePropertiesOptionalParams\n  ): Promise<ContainerRegistryUpdatePropertiesResponse> {\n    return this.client.sendOperationRequest(\n      { name, options },\n      updatePropertiesOperationSpec\n    );\n  }\n\n  /**\n   * List tags of a repository\n   * @param name Name of the image (including the namespace)\n   * @param options The options parameters.\n   */\n  getTags(\n    name: string,\n    options?: ContainerRegistryGetTagsOptionalParams\n  ): Promise<ContainerRegistryGetTagsResponse> {\n    return this.client.sendOperationRequest(\n      { name, options },\n      getTagsOperationSpec\n    );\n  }\n\n  /**\n   * Get tag attributes by tag\n   * @param name Name of the image (including the namespace)\n   * @param reference Tag name\n   * @param options The options parameters.\n   */\n  getTagProperties(\n    name: string,\n    reference: string,\n    options?: ContainerRegistryGetTagPropertiesOptionalParams\n  ): Promise<ContainerRegistryGetTagPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      { name, reference, options },\n      getTagPropertiesOperationSpec\n    );\n  }\n\n  /**\n   * Update tag attributes\n   * @param name Name of the image (including the namespace)\n   * @param reference Tag name\n   * @param options The options parameters.\n   */\n  updateTagAttributes(\n    name: string,\n    reference: string,\n    options?: ContainerRegistryUpdateTagAttributesOptionalParams\n  ): Promise<ContainerRegistryUpdateTagAttributesResponse> {\n    return this.client.sendOperationRequest(\n      { name, reference, options },\n      updateTagAttributesOperationSpec\n    );\n  }\n\n  /**\n   * Delete tag\n   * @param name Name of the image (including the namespace)\n   * @param reference Tag name\n   * @param options The options parameters.\n   */\n  deleteTag(\n    name: string,\n    reference: string,\n    options?: ContainerRegistryDeleteTagOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { name, reference, options },\n      deleteTagOperationSpec\n    );\n  }\n\n  /**\n   * List manifests of a repository\n   * @param name Name of the image (including the namespace)\n   * @param options The options parameters.\n   */\n  getManifests(\n    name: string,\n    options?: ContainerRegistryGetManifestsOptionalParams\n  ): Promise<ContainerRegistryGetManifestsResponse> {\n    return this.client.sendOperationRequest(\n      { name, options },\n      getManifestsOperationSpec\n    );\n  }\n\n  /**\n   * Get manifest attributes\n   * @param name Name of the image (including the namespace)\n   * @param digest Digest of a BLOB\n   * @param options The options parameters.\n   */\n  getManifestProperties(\n    name: string,\n    digest: string,\n    options?: ContainerRegistryGetManifestPropertiesOptionalParams\n  ): Promise<ContainerRegistryGetManifestPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      { name, digest, options },\n      getManifestPropertiesOperationSpec\n    );\n  }\n\n  /**\n   * Update properties of a manifest\n   * @param name Name of the image (including the namespace)\n   * @param digest Digest of a BLOB\n   * @param options The options parameters.\n   */\n  updateManifestProperties(\n    name: string,\n    digest: string,\n    options?: ContainerRegistryUpdateManifestPropertiesOptionalParams\n  ): Promise<ContainerRegistryUpdateManifestPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      { name, digest, options },\n      updateManifestPropertiesOperationSpec\n    );\n  }\n\n  /**\n   * GetRepositoriesNext\n   * @param nextLink The nextLink from the previous successful call to the GetRepositories method.\n   * @param options The options parameters.\n   */\n  getRepositoriesNext(\n    nextLink: string,\n    options?: ContainerRegistryGetRepositoriesNextOptionalParams\n  ): Promise<ContainerRegistryGetRepositoriesNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      getRepositoriesNextOperationSpec\n    );\n  }\n\n  /**\n   * GetTagsNext\n   * @param name Name of the image (including the namespace)\n   * @param nextLink The nextLink from the previous successful call to the GetTags method.\n   * @param options The options parameters.\n   */\n  getTagsNext(\n    name: string,\n    nextLink: string,\n    options?: ContainerRegistryGetTagsNextOptionalParams\n  ): Promise<ContainerRegistryGetTagsNextResponse> {\n    return this.client.sendOperationRequest(\n      { name, nextLink, options },\n      getTagsNextOperationSpec\n    );\n  }\n\n  /**\n   * GetManifestsNext\n   * @param name Name of the image (including the namespace)\n   * @param nextLink The nextLink from the previous successful call to the GetManifests method.\n   * @param options The options parameters.\n   */\n  getManifestsNext(\n    name: string,\n    nextLink: string,\n    options?: ContainerRegistryGetManifestsNextOptionalParams\n  ): Promise<ContainerRegistryGetManifestsNextResponse> {\n    return this.client.sendOperationRequest(\n      { name, nextLink, options },\n      getManifestsNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst checkDockerV2SupportOperationSpec: coreClient.OperationSpec = {\n  path: \"/v2/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getManifestOperationSpec: coreClient.OperationSpec = {\n  path: \"/v2/{name}/manifests/{reference}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.ContainerRegistryGetManifestHeaders\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  urlParameters: [Parameters.url, Parameters.name, Parameters.reference],\n  headerParameters: [Parameters.accept, Parameters.accept1],\n  serializer\n};\nconst createManifestOperationSpec: coreClient.OperationSpec = {\n  path: \"/v2/{name}/manifests/{reference}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerRegistryCreateManifestHeaders\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  requestBody: Parameters.payload,\n  urlParameters: [Parameters.url, Parameters.name, Parameters.reference],\n  headerParameters: [Parameters.accept2, Parameters.contentType],\n  mediaType: \"binary\",\n  serializer\n};\nconst deleteManifestOperationSpec: coreClient.OperationSpec = {\n  path: \"/v2/{name}/manifests/{reference}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    202: {},\n    404: {},\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  urlParameters: [Parameters.url, Parameters.name, Parameters.reference],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getRepositoriesOperationSpec: coreClient.OperationSpec = {\n  path: \"/acr/v1/_catalog\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Repositories,\n      headersMapper: Mappers.ContainerRegistryGetRepositoriesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  queryParameters: [Parameters.last, Parameters.n, Parameters.apiVersion],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPropertiesOperationSpec: coreClient.OperationSpec = {\n  path: \"/acr/v1/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ContainerRepositoryProperties\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.url, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst deleteRepositoryOperationSpec: coreClient.OperationSpec = {\n  path: \"/acr/v1/{name}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    202: {},\n    404: {},\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.url, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updatePropertiesOperationSpec: coreClient.OperationSpec = {\n  path: \"/acr/v1/{name}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ContainerRepositoryProperties\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  requestBody: Parameters.value,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.url, Parameters.name],\n  headerParameters: [Parameters.accept, Parameters.contentType1],\n  mediaType: \"json\",\n  serializer\n};\nconst getTagsOperationSpec: coreClient.OperationSpec = {\n  path: \"/acr/v1/{name}/_tags\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TagList,\n      headersMapper: Mappers.ContainerRegistryGetTagsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  queryParameters: [\n    Parameters.last,\n    Parameters.n,\n    Parameters.apiVersion,\n    Parameters.orderby,\n    Parameters.digest\n  ],\n  urlParameters: [Parameters.url, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getTagPropertiesOperationSpec: coreClient.OperationSpec = {\n  path: \"/acr/v1/{name}/_tags/{reference}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ArtifactTagProperties\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.url, Parameters.name, Parameters.reference],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateTagAttributesOperationSpec: coreClient.OperationSpec = {\n  path: \"/acr/v1/{name}/_tags/{reference}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ArtifactTagProperties\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  requestBody: Parameters.value1,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.url, Parameters.name, Parameters.reference],\n  headerParameters: [Parameters.accept, Parameters.contentType1],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteTagOperationSpec: coreClient.OperationSpec = {\n  path: \"/acr/v1/{name}/_tags/{reference}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    202: {},\n    404: {},\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.url, Parameters.name, Parameters.reference],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getManifestsOperationSpec: coreClient.OperationSpec = {\n  path: \"/acr/v1/{name}/_manifests\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AcrManifests,\n      headersMapper: Mappers.ContainerRegistryGetManifestsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  queryParameters: [\n    Parameters.last,\n    Parameters.n,\n    Parameters.apiVersion,\n    Parameters.orderby\n  ],\n  urlParameters: [Parameters.url, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getManifestPropertiesOperationSpec: coreClient.OperationSpec = {\n  path: \"/acr/v1/{name}/_manifests/{digest}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ArtifactManifestProperties\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.url, Parameters.name, Parameters.digest1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateManifestPropertiesOperationSpec: coreClient.OperationSpec = {\n  path: \"/acr/v1/{name}/_manifests/{digest}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ArtifactManifestProperties\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  requestBody: Parameters.value2,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.url, Parameters.name, Parameters.digest1],\n  headerParameters: [Parameters.accept, Parameters.contentType1],\n  mediaType: \"json\",\n  serializer\n};\nconst getRepositoriesNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Repositories,\n      headersMapper: Mappers.ContainerRegistryGetRepositoriesNextHeaders\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  urlParameters: [Parameters.url, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getTagsNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TagList,\n      headersMapper: Mappers.ContainerRegistryGetTagsNextHeaders\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  urlParameters: [Parameters.url, Parameters.name, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getManifestsNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AcrManifests,\n      headersMapper: Mappers.ContainerRegistryGetManifestsNextHeaders\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  urlParameters: [Parameters.url, Parameters.name, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { ContainerRegistryBlob } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { GeneratedClient } from \"../generatedClient\";\nimport {\n  ContainerRegistryBlobGetBlobOptionalParams,\n  ContainerRegistryBlobGetBlobResponse,\n  ContainerRegistryBlobCheckBlobExistsOptionalParams,\n  ContainerRegistryBlobCheckBlobExistsResponse,\n  ContainerRegistryBlobDeleteBlobOptionalParams,\n  ContainerRegistryBlobDeleteBlobResponse,\n  ContainerRegistryBlobMountBlobOptionalParams,\n  ContainerRegistryBlobMountBlobResponse,\n  ContainerRegistryBlobGetUploadStatusOptionalParams,\n  ContainerRegistryBlobGetUploadStatusResponse,\n  ContainerRegistryBlobUploadChunkOptionalParams,\n  ContainerRegistryBlobUploadChunkResponse,\n  ContainerRegistryBlobCompleteUploadOptionalParams,\n  ContainerRegistryBlobCompleteUploadResponse,\n  ContainerRegistryBlobCancelUploadOptionalParams,\n  ContainerRegistryBlobStartUploadOptionalParams,\n  ContainerRegistryBlobStartUploadResponse,\n  ContainerRegistryBlobGetChunkOptionalParams,\n  ContainerRegistryBlobGetChunkResponse,\n  ContainerRegistryBlobCheckChunkExistsOptionalParams,\n  ContainerRegistryBlobCheckChunkExistsResponse\n} from \"../models\";\n\n/** Class containing ContainerRegistryBlob operations. */\nexport class ContainerRegistryBlobImpl implements ContainerRegistryBlob {\n  private readonly client: GeneratedClient;\n\n  /**\n   * Initialize a new instance of the class ContainerRegistryBlob class.\n   * @param client Reference to the service client\n   */\n  constructor(client: GeneratedClient) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieve the blob from the registry identified by digest.\n   * @param name Name of the image (including the namespace)\n   * @param digest Digest of a BLOB\n   * @param options The options parameters.\n   */\n  getBlob(\n    name: string,\n    digest: string,\n    options?: ContainerRegistryBlobGetBlobOptionalParams\n  ): Promise<ContainerRegistryBlobGetBlobResponse> {\n    return this.client.sendOperationRequest(\n      { name, digest, options },\n      getBlobOperationSpec\n    );\n  }\n\n  /**\n   * Same as GET, except only the headers are returned.\n   * @param name Name of the image (including the namespace)\n   * @param digest Digest of a BLOB\n   * @param options The options parameters.\n   */\n  checkBlobExists(\n    name: string,\n    digest: string,\n    options?: ContainerRegistryBlobCheckBlobExistsOptionalParams\n  ): Promise<ContainerRegistryBlobCheckBlobExistsResponse> {\n    return this.client.sendOperationRequest(\n      { name, digest, options },\n      checkBlobExistsOperationSpec\n    );\n  }\n\n  /**\n   * Removes an already uploaded blob.\n   * @param name Name of the image (including the namespace)\n   * @param digest Digest of a BLOB\n   * @param options The options parameters.\n   */\n  deleteBlob(\n    name: string,\n    digest: string,\n    options?: ContainerRegistryBlobDeleteBlobOptionalParams\n  ): Promise<ContainerRegistryBlobDeleteBlobResponse> {\n    return this.client.sendOperationRequest(\n      { name, digest, options },\n      deleteBlobOperationSpec\n    );\n  }\n\n  /**\n   * Mount a blob identified by the `mount` parameter from another repository.\n   * @param name Name of the image (including the namespace)\n   * @param fromParam Name of the source repository.\n   * @param mount Digest of blob to mount from the source repository.\n   * @param options The options parameters.\n   */\n  mountBlob(\n    name: string,\n    fromParam: string,\n    mount: string,\n    options?: ContainerRegistryBlobMountBlobOptionalParams\n  ): Promise<ContainerRegistryBlobMountBlobResponse> {\n    return this.client.sendOperationRequest(\n      { name, fromParam, mount, options },\n      mountBlobOperationSpec\n    );\n  }\n\n  /**\n   * Retrieve status of upload identified by uuid. The primary purpose of this endpoint is to resolve the\n   * current status of a resumable upload.\n   * @param nextLink Link acquired from upload start or previous chunk. Note, do not include initial /\n   *                 (must do substring(1) )\n   * @param options The options parameters.\n   */\n  getUploadStatus(\n    nextLink: string,\n    options?: ContainerRegistryBlobGetUploadStatusOptionalParams\n  ): Promise<ContainerRegistryBlobGetUploadStatusResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      getUploadStatusOperationSpec\n    );\n  }\n\n  /**\n   * Upload a stream of data without completing the upload.\n   * @param nextLink Link acquired from upload start or previous chunk. Note, do not include initial /\n   *                 (must do substring(1) )\n   * @param value Raw data of blob\n   * @param options The options parameters.\n   */\n  uploadChunk(\n    nextLink: string,\n    value: coreRestPipeline.RequestBodyType,\n    options?: ContainerRegistryBlobUploadChunkOptionalParams\n  ): Promise<ContainerRegistryBlobUploadChunkResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, value, options },\n      uploadChunkOperationSpec\n    );\n  }\n\n  /**\n   * Complete the upload, providing all the data in the body, if necessary. A request without a body will\n   * just complete the upload with previously uploaded content.\n   * @param digest Digest of a BLOB\n   * @param nextLink Link acquired from upload start or previous chunk. Note, do not include initial /\n   *                 (must do substring(1) )\n   * @param options The options parameters.\n   */\n  completeUpload(\n    digest: string,\n    nextLink: string,\n    options?: ContainerRegistryBlobCompleteUploadOptionalParams\n  ): Promise<ContainerRegistryBlobCompleteUploadResponse> {\n    return this.client.sendOperationRequest(\n      { digest, nextLink, options },\n      completeUploadOperationSpec\n    );\n  }\n\n  /**\n   * Cancel outstanding upload processes, releasing associated resources. If this is not called, the\n   * unfinished uploads will eventually timeout.\n   * @param nextLink Link acquired from upload start or previous chunk. Note, do not include initial /\n   *                 (must do substring(1) )\n   * @param options The options parameters.\n   */\n  cancelUpload(\n    nextLink: string,\n    options?: ContainerRegistryBlobCancelUploadOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      cancelUploadOperationSpec\n    );\n  }\n\n  /**\n   * Initiate a resumable blob upload with an empty request body.\n   * @param name Name of the image (including the namespace)\n   * @param options The options parameters.\n   */\n  startUpload(\n    name: string,\n    options?: ContainerRegistryBlobStartUploadOptionalParams\n  ): Promise<ContainerRegistryBlobStartUploadResponse> {\n    return this.client.sendOperationRequest(\n      { name, options },\n      startUploadOperationSpec\n    );\n  }\n\n  /**\n   * Retrieve the blob from the registry identified by `digest`. This endpoint may also support RFC7233\n   * compliant range requests. Support can be detected by issuing a HEAD request. If the header\n   * `Accept-Range: bytes` is returned, range requests can be used to fetch partial content.\n   * @param name Name of the image (including the namespace)\n   * @param digest Digest of a BLOB\n   * @param range Format : bytes=<start>-<end>,  HTTP Range header specifying blob chunk.\n   * @param options The options parameters.\n   */\n  getChunk(\n    name: string,\n    digest: string,\n    range: string,\n    options?: ContainerRegistryBlobGetChunkOptionalParams\n  ): Promise<ContainerRegistryBlobGetChunkResponse> {\n    return this.client.sendOperationRequest(\n      { name, digest, range, options },\n      getChunkOperationSpec\n    );\n  }\n\n  /**\n   * Same as GET, except only the headers are returned.\n   * @param name Name of the image (including the namespace)\n   * @param digest Digest of a BLOB\n   * @param range Format : bytes=<start>-<end>,  HTTP Range header specifying blob chunk.\n   * @param options The options parameters.\n   */\n  checkChunkExists(\n    name: string,\n    digest: string,\n    range: string,\n    options?: ContainerRegistryBlobCheckChunkExistsOptionalParams\n  ): Promise<ContainerRegistryBlobCheckChunkExistsResponse> {\n    return this.client.sendOperationRequest(\n      { name, digest, range, options },\n      checkChunkExistsOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getBlobOperationSpec: coreClient.OperationSpec = {\n  path: \"/v2/{name}/blobs/{digest}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.ContainerRegistryBlobGetBlobHeaders\n    },\n    307: {\n      headersMapper: Mappers.ContainerRegistryBlobGetBlobHeaders\n    },\n    default: {}\n  },\n  urlParameters: [Parameters.url, Parameters.name, Parameters.digest1],\n  headerParameters: [Parameters.accept3],\n  serializer\n};\nconst checkBlobExistsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v2/{name}/blobs/{digest}\",\n  httpMethod: \"HEAD\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerRegistryBlobCheckBlobExistsHeaders\n    },\n    307: {\n      headersMapper: Mappers.ContainerRegistryBlobCheckBlobExistsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  urlParameters: [Parameters.url, Parameters.name, Parameters.digest1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst deleteBlobOperationSpec: coreClient.OperationSpec = {\n  path: \"/v2/{name}/blobs/{digest}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ContainerRegistryBlobDeleteBlobHeaders\n    },\n    404: {},\n    default: {}\n  },\n  urlParameters: [Parameters.url, Parameters.name, Parameters.digest1],\n  serializer\n};\nconst mountBlobOperationSpec: coreClient.OperationSpec = {\n  path: \"/v2/{name}/blobs/uploads/\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerRegistryBlobMountBlobHeaders\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  queryParameters: [Parameters.fromParam, Parameters.mount],\n  urlParameters: [Parameters.url, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getUploadStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/{nextBlobUuidLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    204: {\n      headersMapper: Mappers.ContainerRegistryBlobGetUploadStatusHeaders\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  urlParameters: [Parameters.url, Parameters.nextLink1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst uploadChunkOperationSpec: coreClient.OperationSpec = {\n  path: \"/{nextBlobUuidLink}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ContainerRegistryBlobUploadChunkHeaders\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  requestBody: Parameters.value3,\n  urlParameters: [Parameters.url, Parameters.nextLink1],\n  headerParameters: [Parameters.accept2, Parameters.contentType2],\n  mediaType: \"binary\",\n  serializer\n};\nconst completeUploadOperationSpec: coreClient.OperationSpec = {\n  path: \"/{nextBlobUuidLink}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerRegistryBlobCompleteUploadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  requestBody: Parameters.value4,\n  queryParameters: [Parameters.digest2],\n  urlParameters: [Parameters.url, Parameters.nextLink1],\n  headerParameters: [Parameters.accept2, Parameters.contentType2],\n  mediaType: \"binary\",\n  serializer\n};\nconst cancelUploadOperationSpec: coreClient.OperationSpec = {\n  path: \"/{nextBlobUuidLink}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  urlParameters: [Parameters.url, Parameters.nextLink1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst startUploadOperationSpec: coreClient.OperationSpec = {\n  path: \"/v2/{name}/blobs/uploads/\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ContainerRegistryBlobStartUploadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  urlParameters: [Parameters.url, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getChunkOperationSpec: coreClient.OperationSpec = {\n  path: \"/v2/{name}/blobs/{digest}\",\n  httpMethod: \"GET\",\n  responses: {\n    206: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.ContainerRegistryBlobGetChunkHeaders\n    },\n    default: {}\n  },\n  urlParameters: [Parameters.url, Parameters.name, Parameters.digest1],\n  headerParameters: [Parameters.accept3, Parameters.range],\n  serializer\n};\nconst checkChunkExistsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v2/{name}/blobs/{digest}\",\n  httpMethod: \"HEAD\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerRegistryBlobCheckChunkExistsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  urlParameters: [Parameters.url, Parameters.name, Parameters.digest1],\n  headerParameters: [Parameters.accept, Parameters.range],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { Authentication } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { GeneratedClient } from \"../generatedClient\";\nimport {\n  PostContentSchemaGrantType,\n  AuthenticationExchangeAadAccessTokenForAcrRefreshTokenOptionalParams,\n  AuthenticationExchangeAadAccessTokenForAcrRefreshTokenResponse,\n  TokenGrantType,\n  AuthenticationExchangeAcrRefreshTokenForAcrAccessTokenOptionalParams,\n  AuthenticationExchangeAcrRefreshTokenForAcrAccessTokenResponse\n} from \"../models\";\n\n/** Class containing Authentication operations. */\nexport class AuthenticationImpl implements Authentication {\n  private readonly client: GeneratedClient;\n\n  /**\n   * Initialize a new instance of the class Authentication class.\n   * @param client Reference to the service client\n   */\n  constructor(client: GeneratedClient) {\n    this.client = client;\n  }\n\n  /**\n   * Exchange AAD tokens for an ACR refresh Token\n   * @param grantType Can take a value of access_token_refresh_token, or access_token, or refresh_token\n   * @param service Indicates the name of your Azure container registry.\n   * @param options The options parameters.\n   */\n  exchangeAadAccessTokenForAcrRefreshToken(\n    grantType: PostContentSchemaGrantType,\n    service: string,\n    options?: AuthenticationExchangeAadAccessTokenForAcrRefreshTokenOptionalParams\n  ): Promise<AuthenticationExchangeAadAccessTokenForAcrRefreshTokenResponse> {\n    return this.client.sendOperationRequest(\n      { grantType, service, options },\n      exchangeAadAccessTokenForAcrRefreshTokenOperationSpec\n    );\n  }\n\n  /**\n   * Exchange ACR Refresh token for an ACR Access Token\n   * @param service Indicates the name of your Azure container registry.\n   * @param scope Which is expected to be a valid scope, and can be specified more than once for multiple\n   *              scope requests. You obtained this from the Www-Authenticate response header from the challenge.\n   * @param refreshToken Must be a valid ACR refresh token\n   * @param grantType Grant type is expected to be refresh_token\n   * @param options The options parameters.\n   */\n  exchangeAcrRefreshTokenForAcrAccessToken(\n    service: string,\n    scope: string,\n    refreshToken: string,\n    grantType: TokenGrantType,\n    options?: AuthenticationExchangeAcrRefreshTokenForAcrAccessTokenOptionalParams\n  ): Promise<AuthenticationExchangeAcrRefreshTokenForAcrAccessTokenResponse> {\n    return this.client.sendOperationRequest(\n      { service, scope, refreshToken, grantType, options },\n      exchangeAcrRefreshTokenForAcrAccessTokenOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst exchangeAadAccessTokenForAcrRefreshTokenOperationSpec: coreClient.OperationSpec = {\n  path: \"/oauth2/exchange\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AcrRefreshToken\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  formDataParameters: [\n    Parameters.grantType,\n    Parameters.service,\n    Parameters.tenant,\n    Parameters.refreshToken,\n    Parameters.accessToken\n  ],\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType3, Parameters.accept4],\n  serializer\n};\nconst exchangeAcrRefreshTokenForAcrAccessTokenOperationSpec: coreClient.OperationSpec = {\n  path: \"/oauth2/token\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AcrAccessToken\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  formDataParameters: [\n    Parameters.service,\n    Parameters.scope,\n    Parameters.refreshToken1,\n    Parameters.grantType1\n  ],\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType3, Parameters.accept4],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\nimport {\n  PipelineRequest,\n  PipelineResponse,\n  SendRequest\n} from \"@azure/core-rest-pipeline\";\nimport {\n  ContainerRegistryImpl,\n  ContainerRegistryBlobImpl,\n  AuthenticationImpl\n} from \"./operations\";\nimport {\n  ContainerRegistry,\n  ContainerRegistryBlob,\n  Authentication\n} from \"./operationsInterfaces\";\nimport { ApiVersion20210701, GeneratedClientOptionalParams } from \"./models\";\n\n/** @internal */\nexport class GeneratedClient extends coreClient.ServiceClient {\n  url: string;\n  apiVersion: ApiVersion20210701;\n\n  /**\n   * Initializes a new instance of the GeneratedClient class.\n   * @param url Registry login URL\n   * @param apiVersion Api Version\n   * @param options The parameter options\n   */\n  constructor(\n    url: string,\n    apiVersion: ApiVersion20210701,\n    options?: GeneratedClientOptionalParams\n  ) {\n    if (url === undefined) {\n      throw new Error(\"'url' cannot be null\");\n    }\n    if (apiVersion === undefined) {\n      throw new Error(\"'apiVersion' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: GeneratedClientOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n\n    const packageDetails = `azsdk-js-container-registry/1.1.0-beta.4`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{url}\"\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.url = url;\n    this.apiVersion = apiVersion;\n    this.containerRegistry = new ContainerRegistryImpl(this);\n    this.containerRegistryBlob = new ContainerRegistryBlobImpl(this);\n    this.authentication = new AuthenticationImpl(this);\n    this.addCustomApiVersionPolicy(apiVersion);\n  }\n\n  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */\n  private addCustomApiVersionPolicy(apiVersion?: string) {\n    if (!apiVersion) {\n      return;\n    }\n    const apiVersionPolicy = {\n      name: \"CustomApiVersionPolicy\",\n      async sendRequest(\n        request: PipelineRequest,\n        next: SendRequest\n      ): Promise<PipelineResponse> {\n        const param = request.url.split(\"?\");\n        if (param.length > 1) {\n          const newParams = param[1].split(\"&\").map((item) => {\n            if (item.indexOf(\"api-version\") > -1) {\n              return \"api-version=\" + apiVersion;\n            } else {\n              return item;\n            }\n          });\n          request.url = param[0] + \"?\" + newParams.join(\"&\");\n        }\n        return next(request);\n      }\n    };\n    this.pipeline.addPolicy(apiVersionPolicy);\n  }\n\n  containerRegistry: ContainerRegistry;\n  containerRegistryBlob: ContainerRegistryBlob;\n  authentication: Authentication;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport const SDK_VERSION = \"1.1.0\";\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createTracingClient } from \"@azure/core-tracing\";\nimport { SDK_VERSION } from \"./constants\";\n\n/** @internal */\nexport const tracingClient = createTracingClient({\n  namespace: \"Microsoft.ContainerRegistry\",\n  packageName: \"@azure/container-registry\",\n  packageVersion: SDK_VERSION,\n});\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Extract the path part from the next link value returned by the service,\n * @internal\n */\nexport function extractNextLink(value: string | undefined): string | undefined {\n  // The link value has this pattern\n  //     `</acr/v1/name/...&n=2&orderby=>; rel=\"next\"`\n  // and we only want the part inside of <...>\n  return value?.substr(1, value.indexOf(\">\") - 1);\n}\n\n/**\n * Checks whether a string is a digest\n * @internal\n */\nexport function isDigest(tagOrDigest: string): boolean {\n  return tagOrDigest.includes(\":\");\n}\n\nexport async function readStreamToEnd(\n  stream: NodeJS.ReadableStream,\n  maxLength?: number\n): Promise<Buffer> {\n  const buffers: Buffer[] = [];\n  let bytesRead = 0;\n\n  return new Promise((resolve, reject) => {\n    stream.on(\"data\", (chunk) => {\n      buffers.push(chunk);\n      bytesRead += chunk.length;\n\n      if (maxLength && bytesRead > maxLength) {\n        reject(new Error(`Stream exceeded maximum allowed length of ${maxLength} bytes.`));\n      }\n    });\n    stream.on(\"end\", () => resolve(Buffer.concat(buffers)));\n    stream.on(\"error\", (err) => reject(err));\n  });\n}\n\nexport async function* readChunksFromStream(\n  stream: NodeJS.ReadableStream,\n  chunkSize: number\n): AsyncGenerator<Buffer> {\n  let chunk = Buffer.alloc(chunkSize);\n  let chunkCursor = 0;\n\n  for await (const data of stream) {\n    const dataAsBuffer = Buffer.isBuffer(data) ? data : Buffer.from(data, \"utf8\");\n    let dataCursor = 0;\n\n    while (dataCursor < dataAsBuffer.length) {\n      const bytesCopied = dataAsBuffer.copy(chunk, chunkCursor, dataCursor);\n      dataCursor += bytesCopied;\n      chunkCursor += bytesCopied;\n      if (chunkCursor >= chunkSize) {\n        yield chunk;\n        chunkCursor = 0;\n        chunk = Buffer.alloc(chunkSize);\n      }\n    }\n  }\n\n  if (chunkCursor > 0) {\n    yield chunk.subarray(0, chunkCursor);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Defined supported names of WWW-Authenticate name-value pairs.\n */\nexport type ValidParsedWWWAuthenticateProperties =\n  // \"authorization_uri\" was used in the track 1 version of KeyVault.\n  // This is not a relevant property anymore, since the service is consistently answering with \"authorization\".\n  // | \"authorization_uri\"\n  | \"authorization\"\n  | \"claims\"\n  // Even though the service is moving to \"scope\", both \"resource\" and \"scope\" should be supported.\n  | \"resource\"\n  | \"scope\"\n  | \"service\";\n\n/**\n * Represents the result of `parseWWWAuthenticate()`;\n */\nexport type ParsedWWWAuthenticate = {\n  [Key in ValidParsedWWWAuthenticateProperties]?: string;\n};\n\n/**\n * Parses an WWW-Authenticate response.\n * This transforms a string value like:\n * `Bearer authorization=\"some_authorization\", resource=\"https://some.url\"`\n * into an object like:\n * `{ authorization: \"some_authorization\", resource: \"https://some.url\" }`\n * @param wwwAuthenticate - String value in the WWW-Authenticate header\n */\nexport function parseWWWAuthenticate(wwwAuthenticate: string): ParsedWWWAuthenticate {\n  // Match on things that look like property name/value pairs. We assume that values are quoted,\n  // this hasn't been an issue yet...\n  const pattern = /(\\w+?)=\"(.*?)\"/g;\n\n  const value: ParsedWWWAuthenticate = {};\n\n  let match: string[] | null;\n  while ((match = pattern.exec(wwwAuthenticate)) !== null) {\n    value[match[1] as keyof ParsedWWWAuthenticate] = match[2];\n  }\n\n  return value;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\n\nfunction delay<T>(t: number, value?: T): Promise<T | void> {\n  return new Promise((resolve) => setTimeout(() => resolve(value), t));\n}\n/**\n * A function that gets a promise of an access token and allows providing\n * options.\n *\n * @param options - the options to pass to the underlying token provider\n */\nexport type AccessTokenGetter<T extends GetTokenOptions> = (\n  scopes: string | string[],\n  options: T\n) => Promise<AccessToken>;\n\n/**\n * The response of the\n */\nexport interface AccessTokenRefresher<T extends GetTokenOptions> {\n  cachedToken?: AccessToken;\n  getToken: AccessTokenGetter<T>;\n}\n\nexport interface TokenCyclerOptions {\n  /**\n   * The window of time before token expiration during which the token will be\n   * considered unusable due to risk of the token expiring before sending the\n   * request.\n   *\n   * This will only become meaningful if the refresh fails for over\n   * (refreshWindow - forcedRefreshWindow) milliseconds.\n   */\n  forcedRefreshWindowInMs: number;\n  /**\n   * Interval in milliseconds to retry failed token refreshes.\n   */\n  retryIntervalInMs: number;\n  /**\n   * The window of time before token expiration during which\n   * we will attempt to refresh the token.\n   */\n  refreshWindowInMs: number;\n}\n\n// Default options for the cycler if none are provided\nexport const DEFAULT_CYCLER_OPTIONS: TokenCyclerOptions = {\n  forcedRefreshWindowInMs: 1000, // Force waiting for a refresh 1s before the token expires\n  retryIntervalInMs: 3000, // Allow refresh attempts every 3s\n  refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */\nasync function beginRefresh(\n  getAccessToken: () => Promise<AccessToken | null>,\n  retryIntervalInMs: number,\n  refreshTimeout: number\n): Promise<AccessToken> {\n  // This wrapper handles exceptions gracefully as long as we haven't exceeded\n  // the timeout.\n  async function tryGetAccessToken(): Promise<AccessToken | null> {\n    if (Date.now() < refreshTimeout) {\n      try {\n        return await getAccessToken();\n      } catch {\n        return null;\n      }\n    } else {\n      const finalToken = await getAccessToken();\n\n      // Timeout is up, so throw if it's still null\n      if (finalToken === null) {\n        throw new Error(\"Failed to refresh access token.\");\n      }\n\n      return finalToken;\n    }\n  }\n\n  let token: AccessToken | null = await tryGetAccessToken();\n\n  while (token === null) {\n    await delay(retryIntervalInMs);\n\n    token = await tryGetAccessToken();\n  }\n\n  return token;\n}\n\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nexport function createTokenCycler<T extends GetTokenOptions>(\n  credential: TokenCredential,\n  tokenCyclerOptions?: Partial<TokenCyclerOptions>\n): AccessTokenRefresher<T> {\n  let refreshWorker: Promise<AccessToken> | null = null;\n  let token: AccessToken | null = null;\n\n  const options = {\n    ...DEFAULT_CYCLER_OPTIONS,\n    ...tokenCyclerOptions,\n  };\n\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n  const cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing(): boolean {\n      return refreshWorker !== null;\n    },\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh(): boolean {\n      return (\n        !cycler.isRefreshing &&\n        (token?.expiresOnTimestamp ?? 0) - options.refreshWindowInMs < Date.now()\n      );\n    },\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh(): boolean {\n      return (\n        token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now()\n      );\n    },\n  };\n\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n  function refresh(scopes: string | string[], getTokenOptions: T): Promise<AccessToken> {\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      const tryGetAccessToken = (): Promise<AccessToken | null> =>\n        credential.getToken(scopes, getTokenOptions);\n\n      // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n      refreshWorker = beginRefresh(\n        tryGetAccessToken,\n        options.retryIntervalInMs,\n        // If we don't have a token, then we should timeout immediately\n        token?.expiresOnTimestamp ?? Date.now()\n      )\n        .then((_token) => {\n          refreshWorker = null;\n          token = _token;\n          return token;\n        })\n        .catch((reason) => {\n          // We also should reset the refresher if we enter a failed state.  All\n          // existing awaiters will throw, but subsequent requests will start a\n          // new retry chain.\n          refreshWorker = null;\n          token = null;\n          throw reason;\n        });\n    }\n\n    return refreshWorker as Promise<AccessToken>;\n  }\n\n  return {\n    get cachedToken(): AccessToken | undefined {\n      return token || undefined;\n    },\n    getToken: async (scopes: string | string[], tokenOptions: T): Promise<AccessToken> => {\n      //\n      // Simple rules:\n      // - If we MUST refresh, then return the refresh task, blocking\n      //   the pipeline until a token is available.\n      // - If we SHOULD refresh, then run refresh but don't return it\n      //   (we can still use the cached token).\n      // - Return the token, since it's fine if we didn't return in\n      //   step 1.\n      //\n      if (cycler.mustRefresh) return refresh(scopes, tokenOptions);\n\n      if (cycler.shouldRefresh) {\n        refresh(scopes, tokenOptions);\n      }\n\n      return token as AccessToken;\n    },\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { GetTokenOptions } from \"@azure/core-auth\";\nimport {\n  AuthorizeRequestOnChallengeOptions,\n  ChallengeCallbacks,\n  AuthorizeRequestOptions,\n} from \"@azure/core-rest-pipeline\";\nimport { parseWWWAuthenticate } from \"./utils/wwwAuthenticateParser\";\nimport {\n  ContainerRegistryGetTokenOptions,\n  ContainerRegistryRefreshTokenCredential,\n} from \"./containerRegistryTokenCredential\";\nimport { AccessTokenRefresher, createTokenCycler } from \"./utils/tokenCycler\";\n\nconst fiveMinutesInMs = 5 * 60 * 1000;\n\n/**\n * Handles challenge based authentication for Container Registry Service.\n *```\n *  The challenge-based authorization flow for ACR is illustrated in the following steps.\n *  For example, GET /api/v1/acr/repositories translates into the following calls.\n *      Step 1: GET /api/v1/acr/repositories\n *  Return Header: 401: www-authenticate header - Bearer realm=\"{url}\",service=\"{serviceName}\",scope=\"{scope}\",error=\"invalid_token\"\n *      Step 2: Retrieve the serviceName, scope from the WWW-Authenticate header.  (Parse the string.)\n *      Step 3: POST /api/oauth2/exchange\n *  Request Body : { service, scope, grant-type, aadToken with ARM scope }\n *  Response Body: { acrRefreshToken }\n *      Step 4: POST /api/oauth2/token\n *  Request Body: { acrRefreshToken, scope, grant-type }\n *  Response Body: { acrAccessToken }\n *      Step 5: GET /api/v1/acr/repositories\n *  Request Header: { Bearer acrTokenAccess }\n *```\n */\nexport class ChallengeHandler implements ChallengeCallbacks {\n  private readonly cycler: AccessTokenRefresher<ContainerRegistryGetTokenOptions>;\n  private cachedAcrAccessToken: string | undefined;\n\n  constructor(\n    private credential: ContainerRegistryRefreshTokenCredential,\n    private options: GetTokenOptions = {}\n  ) {\n    this.cycler = createTokenCycler(credential, {\n      refreshWindowInMs: fiveMinutesInMs,\n    });\n  }\n\n  authorizeRequest(options: AuthorizeRequestOptions): Promise<void> {\n    // Try using the existing token in case we don't need to refresh.\n    if (this.cachedAcrAccessToken) {\n      options.request.headers.set(\"Authorization\", `Bearer ${this.cachedAcrAccessToken}`);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Updates  the authentication context based on the challenge.\n   */\n  async authorizeRequestOnChallenge(options: AuthorizeRequestOnChallengeOptions): Promise<boolean> {\n    // Once we're here, we've completed Step 1.\n    const challenge = options.response?.headers.get(\"WWW-Authenticate\");\n    if (!challenge) {\n      throw new Error(\"Failed to retrieve challenge from response headers\");\n    }\n    // Step 2: Parse challenge string to retrieve serviceName and scope, where scope is the ACR Scope\n    const { service, scope } = parseWWWAuthenticate(challenge);\n\n    if (!service) {\n      throw new Error(\"Failed to retrieve 'service' from challenge\");\n    }\n\n    if (!scope) {\n      throw new Error(\"Failed to retrieve 'scope' from challenge\");\n    }\n\n    // Step 3: Exchange AAD Access Token for ACR Refresh Token\n    //   For anonymous access, we send the request with grant_type=password and an empty ACR refresh token\n    //   For non-anonymous access, we get an AAD token then exchange it for an ACR fresh token\n    let grantType: \"password\" | \"refresh_token\";\n    let acrRefreshToken: string;\n    if (this.credential.isAnonymousAccess) {\n      grantType = \"password\";\n      acrRefreshToken = \"\";\n    } else {\n      grantType = \"refresh_token\";\n      acrRefreshToken = (await this.cycler.getToken(scope, { ...options, service })).token;\n    }\n\n    // Step 4: Send in acrRefreshToken and get back acrAccessToken\n    const acrAccessToken =\n      await this.credential.tokenService.ExchangeAcrRefreshTokenForAcrAccessTokenAsync(\n        acrRefreshToken,\n        service,\n        scope,\n        grantType,\n        this.options\n      );\n\n    // Step 5 - Authorize Request.  At this point we're done with AAD and using an ACR access token.\n    options.request.headers.set(\"Authorization\", `Bearer ${acrAccessToken}`);\n\n    this.cachedAcrAccessToken = acrAccessToken;\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  ArtifactTagOrderBy as ServiceTagOrderBy,\n  ArtifactManifestOrderBy as ServiceManifestOrderBy,\n  ManifestWriteableProperties as ServiceManifestWritableProperties,\n  ArtifactManifestProperties as ServiceArtifactManifestProperties,\n} from \"./generated/models\";\nimport { ArtifactManifestProperties, ArtifactTagOrder, ArtifactManifestOrder } from \"./models\";\n\n/** Changeable attributes. Filter out `quarantineState` and `quarantineDetails` returned by service */\ninterface ManifestWriteableProperties {\n  /** Delete enabled */\n  canDelete?: boolean;\n  /** Write enabled */\n  canWrite?: boolean;\n  /** List enabled */\n  canList?: boolean;\n  /** Read enabled */\n  canRead?: boolean;\n}\n\nexport function toManifestWritableProperties(\n  from?: ServiceManifestWritableProperties\n): ManifestWriteableProperties | undefined {\n  // don't return unwanted properties, namely `quarantineState` and `quarantineDetails`\n  return from\n    ? {\n        canDelete: from.canDelete,\n        canList: from.canList,\n        canRead: from.canRead,\n        canWrite: from.canWrite,\n      }\n    : undefined;\n}\n\nexport function toArtifactManifestProperties(\n  from: ServiceArtifactManifestProperties,\n  repositoryName: string,\n  registryLoginServer: string\n): ArtifactManifestProperties {\n  return {\n    registryLoginServer,\n    repositoryName,\n    digest: from.digest,\n    sizeInBytes: from.size,\n    createdOn: from.createdOn,\n    lastUpdatedOn: from.lastUpdatedOn,\n    architecture: from.architecture ?? undefined,\n    operatingSystem: from.operatingSystem ?? undefined,\n    relatedArtifacts: from.relatedArtifacts ?? [],\n    tags: from.tags ?? [],\n    ...toManifestWritableProperties(from),\n  };\n}\n\nexport function toServiceTagOrderBy(orderBy?: ArtifactTagOrder): ServiceTagOrderBy | undefined {\n  return orderBy === \"LastUpdatedOnAscending\"\n    ? \"timeasc\"\n    : orderBy === \"LastUpdatedOnDescending\"\n    ? \"timedesc\"\n    : undefined;\n}\n\nexport function toServiceManifestOrderBy(\n  orderBy?: ArtifactManifestOrder\n): ServiceManifestOrderBy | undefined {\n  return orderBy === \"LastUpdatedOnAscending\"\n    ? \"timeasc\"\n    : orderBy === \"LastUpdatedOnDescending\"\n    ? \"timedesc\"\n    : undefined;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/// <reference lib=\"esnext.asynciterable\" />\n\nimport { OperationOptions } from \"@azure/core-client\";\nimport \"@azure/core-paging\";\nimport { PageSettings, PagedAsyncIterableIterator } from \"@azure/core-paging\";\n\nimport {\n  ArtifactTagProperties,\n  ArtifactManifestProperties,\n  ArtifactTagOrder,\n  TagPageResponse,\n} from \"./models\";\nimport { tracingClient } from \"./tracing\";\nimport { GeneratedClient } from \"./generated\";\nimport { extractNextLink, isDigest } from \"./utils/helpers\";\nimport { toArtifactManifestProperties, toServiceTagOrderBy } from \"./transformations\";\n\n/**\n * Options for the `delete` method of `RegistryArtifact`.\n */\nexport interface DeleteArtifactOptions extends OperationOptions {}\n/**\n * Options for the `deleteTag` method of `RegistryArtifact`.\n */\nexport interface DeleteTagOptions extends OperationOptions {}\n/**\n * Options for the `getManifestProperties` method of `RegistryArtifact`.\n */\nexport interface GetManifestPropertiesOptions extends OperationOptions {}\n/**\n * Options for the `getTagProperties` method of `RegistryArtifact`.\n */\nexport interface GetTagPropertiesOptions extends OperationOptions {}\n\n/**\n * Options for the `updateTagProperties` method of `RegistryArtifact`.\n */\nexport interface UpdateTagPropertiesOptions extends OperationOptions {\n  /** Whether or not this tag can be deleted */\n  canDelete?: boolean;\n  /** Whether or not this tag can be written to */\n  canWrite?: boolean;\n  /** Whether or not to include this tag when listing tags */\n  canList?: boolean;\n  /** Whether or not this tag can be read */\n  canRead?: boolean;\n}\n\n/**\n * Options for the `updateManifestProperties` method of `RegistryArtifact`.\n */\nexport interface UpdateManifestPropertiesOptions extends OperationOptions {\n  /** Whether or not this manifest can be deleted */\n  canDelete?: boolean;\n  /** Whether or not this manifest can be written to */\n  canWrite?: boolean;\n  /** Whether or not to include this manifest when listing manifest properties */\n  canList?: boolean;\n  /** Whether or not this manifest can be read */\n  canRead?: boolean;\n}\n\n/**\n * Options for the `listTagProperties` method of `RegistryArtifact`.\n */\nexport interface ListTagPropertiesOptions extends OperationOptions {\n  /** order in which the tags are returned */\n  order?: ArtifactTagOrder;\n}\n\n/**\n * `Artifact` is the general term for items stored in a container registry,\n * and can include Docker images or other Open Container Initiative (OCI) artifact types.\n *\n * The {@link RegistryArtifact} interface is a helper that groups information and operations about an image\n * or artifact in a container registry.\n *\n */\nexport interface RegistryArtifact {\n  /**\n   * The Azure Container Registry endpoint.\n   */\n  readonly registryEndpoint: string;\n  /**\n   * Repository name.\n   */\n  readonly repositoryName: string;\n  /**\n   * fully qualified reference of the artifact.\n   */\n  readonly fullyQualifiedReference: string;\n  /**\n   * Deletes this registry artifact by deleting its manifest.\n   * @param options -\n   */\n  delete(options?: DeleteArtifactOptions): Promise<void>;\n  /**\n   * Deletes a tag. This removes the tag from the artifact and its manifest.\n   * @param tag - the name of the tag to delete.\n   * @param options -\n   */\n  deleteTag(tag: string, options?: DeleteTagOptions): Promise<void>;\n  /**\n   * Retrieves the properties of the manifest that uniquely identifies this artifact.\n   * @param options -\n   */\n  getManifestProperties(\n    options?: GetManifestPropertiesOptions\n  ): Promise<ArtifactManifestProperties>;\n  /**\n   * Updates the properties of the artifact's manifest.\n   *\n   * Example usage:\n   *\n   * ```javascript\n   * const client = new ContainerRegistryClient(url, credential);\n   * const artifact = client.getArtifact(repositoryName, artifactTagOrDigest)\n   * const updated = await artifact.updateManifestProperties({\n   *   canDelete: false,\n   *   canList: false,\n   *   canRead: false,\n   *   canWrite: false\n   * });\n   * ```\n   * @param options -\n   */\n  updateManifestProperties(\n    options: UpdateManifestPropertiesOptions\n  ): Promise<ArtifactManifestProperties>;\n  /**\n   * Retrieves the properties of the specified tag.\n   * @param tag - the tag to retrieve properties.\n   * @param options -\n   */\n  getTagProperties(tag: string, options?: GetTagPropertiesOptions): Promise<ArtifactTagProperties>;\n  /**\n   * Updates the properties of a given tag.\n   *\n   * Example usage:\n   *\n   * ```javascript\n   * const client = new ContainerRegistryClient(url, credential);\n   * const artifact = client.getArtifact(repositoryName, artifactTagOrDigest)\n   * const updated = await artifact.updateTagProperties(tag, {\n   *   canDelete: false,\n   *   canList: false,\n   *   canRead: false,\n   *   canWrite: false\n   * });\n   * ```\n   * @param tag - name of the tag to update properties on\n   * @param options -\n   */\n  updateTagProperties(\n    tag: string,\n    options: UpdateTagPropertiesOptions\n  ): Promise<ArtifactTagProperties>;\n  /**\n   * Returns an async iterable iterator to list the tags that uniquely identify this artifact and the properties of each.\n   *\n   * Example using `for-await-of` syntax:\n   *\n   * ```javascript\n   * const client = new ContainerRegistryClient(url, credentials);\n   * const repository = client.getRepository(repositoryName);\n   * const artifact = repository.getArtifact(digest)\n   * for await (const tag of artifact.listTagProperties()) {\n   *   console.log(\"tag: \", tag);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```javascript\n   * const iter = artifact.listTagProperties();\n   * let item = await iter.next();\n   * while (!item.done) {\n   *   console.log(\"tag properties: \", item.value);\n   *   item = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```javascript\n   * const pages = artifact.listTagProperties().byPage({ maxPageSize: 2 });\n   * let page = await pages.next();\n   * let i = 1;\n   * while (!page.done) {\n   *  if (page.value) {\n   *    console.log(`-- page ${i++}`);\n   *    for (const tagProperties of page.value) {\n   *      console.log(`  repository name: ${tagProperties}`);\n   *    }\n   *  }\n   *  page = await pages.next();\n   * }\n   * ```\n   * @param options -\n   */\n  listTagProperties(\n    options?: ListTagPropertiesOptions\n  ): PagedAsyncIterableIterator<ArtifactTagProperties>;\n}\n\n/**\n * The client class used to interact with the Container Registry service.\n * @internal\n */\nexport class RegistryArtifactImpl {\n  private client: GeneratedClient;\n  /**\n   * The Azure Container Registry endpoint.\n   */\n  public readonly registryEndpoint: string;\n  /**\n   * Repository name.\n   */\n  public readonly repositoryName: string;\n\n  /**\n   * Name of the form 'registry-login-server/repository-name\\@digest' or\n   *   'registry-login-server/repository-name:tag'\n   */\n  public readonly fullyQualifiedReference: string;\n\n  private digest?: string;\n  /**\n   * Creates an instance of a RegistryArtifact.\n   * @param registryEndpoint - the URL to the Container Registry endpoint\n   * @param repositoryName - the name of the repository\n   * @param tagOrDigest - the tag or digest of this artifact\n   * @param client - the generated client that interacts with service\n   */\n  constructor(\n    registryEndpoint: string,\n    repositoryName: string,\n    private tagOrDigest: string,\n    client: GeneratedClient\n  ) {\n    this.registryEndpoint = registryEndpoint;\n    this.repositoryName = repositoryName;\n\n    const parsedUrl = new URL(registryEndpoint);\n    if (isDigest(tagOrDigest)) {\n      this.digest = tagOrDigest;\n      this.fullyQualifiedReference = `${parsedUrl.hostname}/${repositoryName}@${this.digest}`;\n    } else {\n      this.fullyQualifiedReference = `${parsedUrl.hostname}/${repositoryName}:${tagOrDigest}`;\n    }\n\n    this.client = client;\n  }\n\n  /**\n   * digest of this artifact.\n   */\n  private async getDigest(): Promise<string> {\n    if (this.digest) {\n      return this.digest;\n    }\n\n    if (!isDigest(this.tagOrDigest)) {\n      this.digest = (await this.getTagProperties(this.tagOrDigest)).digest;\n    } else {\n      this.digest = this.tagOrDigest;\n    }\n\n    return this.digest;\n  }\n\n  /**\n   * Deletes this registry artifact by deleting its manifest.\n   * @param options -\n   */\n  public async delete(options: DeleteArtifactOptions = {}): Promise<void> {\n    return tracingClient.withSpan(\n      \"RegistryArtifactImpl.delete\",\n      options,\n      async (updatedOptions) => {\n        await this.client.containerRegistry.deleteManifest(\n          this.repositoryName,\n          await this.getDigest(),\n          updatedOptions\n        );\n      }\n    );\n  }\n\n  /**\n   * Deletes a tag. This removes the tag from the artifact and its manifest.\n   * @param tag - the name of the tag to delete.\n   * @param options -\n   */\n  public async deleteTag(tag: string, options: DeleteTagOptions = {}): Promise<void> {\n    if (!tag) {\n      throw new Error(\"invalid tag\");\n    }\n\n    return tracingClient.withSpan(\n      \"RegistryArtifactImpl.deleteTag\",\n      options,\n      async (updatedOptions) => {\n        await this.client.containerRegistry.deleteTag(this.repositoryName, tag, updatedOptions);\n      }\n    );\n  }\n\n  /**\n   * Retrieves the properties of the manifest that uniquely identifies this artifact.\n   * @param options -\n   */\n  public async getManifestProperties(\n    options: GetManifestPropertiesOptions = {}\n  ): Promise<ArtifactManifestProperties> {\n    return tracingClient.withSpan(\n      \"RegistryArtifactImpl.getManifestProperties\",\n      options,\n      async (updatedOptions) => {\n        const result = await this.client.containerRegistry.getManifestProperties(\n          this.repositoryName,\n          await this.getDigest(),\n          updatedOptions\n        );\n        return toArtifactManifestProperties(\n          result,\n          this.repositoryName,\n          result.registryLoginServer!\n        );\n      }\n    );\n  }\n\n  /**\n   * Updates the properties of the artifact's manifest.\n   *\n   * Example usage:\n   *\n   * ```javascript\n   * const client = new ContainerRegistryClient(url, credential);\n   * const artifact = client.getArtifact(repositoryName, artifactTagOrDigest)\n   * const updated = await artifact.updateManifestProperties({\n   *   canDelete: false,\n   *   canList: false,\n   *   canRead: false,\n   *   canWrite: false\n   * });\n   * ```\n   * @param options -\n   */\n  public async updateManifestProperties(\n    options: UpdateManifestPropertiesOptions\n  ): Promise<ArtifactManifestProperties> {\n    return tracingClient.withSpan(\n      \"RegistryArtifactImpl.updateManifestProperties\",\n      {\n        ...options,\n        value: {\n          canDelete: options.canDelete,\n          canWrite: options.canWrite,\n          canList: options.canList,\n          canRead: options.canRead,\n        },\n      },\n      async (updatedOptions) => {\n        const result = await this.client.containerRegistry.updateManifestProperties(\n          this.repositoryName,\n          await this.getDigest(),\n          updatedOptions\n        );\n        return toArtifactManifestProperties(\n          result,\n          this.repositoryName,\n          result.registryLoginServer!\n        );\n      }\n    );\n  }\n\n  /**\n   * Retrieves the properties of the specified tag.\n   * @param tag - the tag to retrieve properties.\n   * @param options -\n   */\n  public async getTagProperties(\n    tag: string,\n    options: GetTagPropertiesOptions = {}\n  ): Promise<ArtifactTagProperties> {\n    if (!tag) {\n      throw new Error(\"invalid tag\");\n    }\n\n    return tracingClient.withSpan(\n      \"RegistryArtifactImpl.getTagProperties\",\n      options,\n      (updatedOptions) => {\n        return this.client.containerRegistry.getTagProperties(\n          this.repositoryName,\n          tag,\n          updatedOptions\n        );\n      }\n    );\n  }\n\n  /**\n   * Updates the properties of a given tag.\n   *\n   * Example usage:\n   *\n   * ```javascript\n   * const client = new ContainerRegistryClient(url, credential);\n   * const artifact = client.getArtifact(repositoryName, artifactTagOrDigest)\n   * const updated = await artifact.updateTagProperties(tag, {\n   *   canDelete: false,\n   *   canList: false,\n   *   canRead: false,\n   *   canWrite: false\n   * });\n   * ```\n   * @param tag - name of the tag to update properties on\n   * @param options -\n   */\n  public async updateTagProperties(\n    tag: string,\n    options: UpdateTagPropertiesOptions\n  ): Promise<ArtifactTagProperties> {\n    if (!tag) {\n      throw new Error(\"invalid tag\");\n    }\n\n    return tracingClient.withSpan(\n      \"RegistryArtifactImpl.updateTagProperties\",\n      {\n        ...options,\n        value: {\n          canDelete: options.canDelete,\n          canWrite: options.canWrite,\n          canList: options.canList,\n          canRead: options.canRead,\n        },\n      },\n      (updatedOptions) => {\n        return this.client.containerRegistry.updateTagAttributes(\n          this.repositoryName,\n          tag,\n          updatedOptions\n        );\n      }\n    );\n  }\n\n  /**\n   * Returns an async iterable iterator to list the tags that uniquely identify this artifact and the properties of each.\n   *\n   * Example using `for-await-of` syntax:\n   *\n   * ```javascript\n   * const client = new ContainerRegistryClient(url, credentials);\n   * const repository = client.getRepository(repositoryName);\n   * const artifact = repository.getArtifact(digest)\n   * for await (const tag of artifact.listTagProperties()) {\n   *   console.log(\"tag: \", tag);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```javascript\n   * const iter = artifact.listTagProperties();\n   * let item = await iter.next();\n   * while (!item.done) {\n   *   console.log(\"tag properties: \", item.value);\n   *   item = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```javascript\n   * const pages = artifact.listTagProperties().byPage({ maxPageSize: 2 });\n   * let page = await pages.next();\n   * let i = 1;\n   * while (!page.done) {\n   *  if (page.value) {\n   *    console.log(`-- page ${i++}`);\n   *    for (const tagProperties of page.value) {\n   *      console.log(`  repository name: ${tagProperties}`);\n   *    }\n   *  }\n   *  page = await pages.next();\n   * }\n   * ```\n   * @param options -\n   */\n  public listTagProperties(\n    options: ListTagPropertiesOptions = {}\n  ): PagedAsyncIterableIterator<ArtifactTagProperties, TagPageResponse> {\n    const iter = this.listTagsItems(options);\n\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) => this.listTagsPage(settings, options),\n    };\n  }\n\n  private async *listTagsItems(\n    options: ListTagPropertiesOptions = {}\n  ): AsyncIterableIterator<ArtifactTagProperties> {\n    for await (const page of this.listTagsPage({}, options)) {\n      yield* page;\n    }\n  }\n\n  private async *listTagsPage(\n    continuationState: PageSettings,\n    options: ListTagPropertiesOptions = {}\n  ): AsyncIterableIterator<TagPageResponse> {\n    const orderby = toServiceTagOrderBy(options.order);\n    if (!continuationState.continuationToken) {\n      const optionsComplete = {\n        ...options,\n        n: continuationState.maxPageSize,\n        orderby,\n      };\n      const currentPage = await this.client.containerRegistry.getTags(\n        this.repositoryName,\n        optionsComplete\n      );\n      continuationState.continuationToken = extractNextLink(currentPage.link);\n      if (currentPage.tagAttributeBases) {\n        const array = currentPage.tagAttributeBases.map((t) => {\n          return {\n            registryLoginServer: currentPage.registryLoginServer,\n            repositoryName: currentPage.repository,\n            ...t,\n          };\n        });\n        yield Object.defineProperty(array, \"continuationToken\", {\n          value: continuationState.continuationToken,\n          enumerable: true,\n        });\n      }\n    }\n    while (continuationState.continuationToken) {\n      const currentPage = await this.client.containerRegistry.getTagsNext(\n        this.repositoryName,\n        continuationState.continuationToken,\n        options\n      );\n      continuationState.continuationToken = extractNextLink(currentPage.link);\n      if (currentPage.tagAttributeBases) {\n        const array = currentPage.tagAttributeBases.map((t) => {\n          return {\n            registryLoginServer: currentPage.registryLoginServer,\n            repositoryName: currentPage.repository,\n            ...t,\n          };\n        });\n        yield Object.defineProperty(array, \"continuationToken\", {\n          value: continuationState.continuationToken,\n          enumerable: true,\n        });\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/// <reference lib=\"esnext.asynciterable\" />\n\nimport { OperationOptions } from \"@azure/core-client\";\nimport \"@azure/core-paging\";\nimport { PageSettings, PagedAsyncIterableIterator } from \"@azure/core-paging\";\n\nimport { GeneratedClient, RepositoryWriteableProperties } from \"./generated\";\nimport { tracingClient } from \"./tracing\";\nimport {\n  ArtifactManifestOrder,\n  ContainerRepositoryProperties,\n  ArtifactManifestProperties,\n  ManifestPageResponse,\n} from \"./models\";\nimport { RegistryArtifact, RegistryArtifactImpl } from \"./registryArtifact\";\nimport { toArtifactManifestProperties, toServiceManifestOrderBy } from \"./transformations\";\nimport { extractNextLink } from \"./utils/helpers\";\n\n/**\n * Options for delete repository operation.\n */\nexport interface DeleteRepositoryOptions extends OperationOptions {}\n/**\n * Options for the `listRegistryArtifacts` method of `ContainerRepository`.\n */\nexport interface ListManifestPropertiesOptions extends OperationOptions {\n  /** order in which the manifest properties are returned */\n  order?: ArtifactManifestOrder;\n}\n/**\n * Options for the `getProperties` method of `ContainerRepository`.\n */\nexport interface GetRepositoryPropertiesOptions extends OperationOptions {}\n/**\n * Options for the `setProperties` method of `ContainerRepository`.\n */\nexport interface UpdateRepositoryPropertiesOptions extends OperationOptions {\n  /** Whether or not this repository can be deleted */\n  canDelete?: boolean;\n  /** Whether or not this repository can be written to */\n  canWrite?: boolean;\n  /** Whether or not include this repository when listing repositories */\n  canList?: boolean;\n  /** Whether or not this repository can be read */\n  canRead?: boolean;\n}\n\n/**\n * A `repository` in a container registry is a logical grouping of images or artifacts that share the same name.  For example,\n * different versions of a `hello-world` application could have tags `v1` and `v2`, and be grouped by the repository `hello-world`.\n *\n * The {@link ContainerRepository} interface is a helper that groups information and operations about a repository in this\n * container registry.\n */\nexport interface ContainerRepository {\n  /**\n   * The Azure Container Registry endpoint.\n   */\n  readonly registryEndpoint: string;\n  /**\n   * Repository name.\n   */\n  readonly name: string;\n  /**\n   * Deletes this repository and all artifacts that are part of its logical group.\n   *\n   * @param options - optional configuration for the operation\n   */\n  delete(options?: DeleteRepositoryOptions): Promise<void>;\n  /**\n   * Returns an helper instance of {@link RegistryArtifact} for the given tag or digest.\n   * @param tagOrDigest - the tag or digest of the artifact\n   */\n  getArtifact(tagOrDigest: string): RegistryArtifact;\n  /**\n   * Retrieves the properties of this repository.\n   * @param options -\n   */\n  getProperties(options?: GetRepositoryPropertiesOptions): Promise<ContainerRepositoryProperties>;\n  /**\n   * Updates the properties of this repository.\n   *\n   * Example usage:\n   *\n   * ```javascript\n   * const client = new ContainerRegistryClient(url, credential);\n   * const repository = client.getRepository(repositoryName)\n   * const updated = await repository.updateProperties({\n   *   canDelete: false,\n   *   canList: false,\n   *   canRead: false,\n   *   canWrite: false\n   * });\n   * ```\n   * @param options -\n   */\n  updateProperties(\n    options: UpdateRepositoryPropertiesOptions\n  ): Promise<ContainerRepositoryProperties>;\n  /**\n   * Returns an async iterable iterator to list manifest properties.\n   * This is useful for determining the collection of artifacts associated with\n   * this repository, as each artifact is uniquely identified by its manifest.\n   *\n   * Example using `for-await-of` syntax:\n   *\n   * ```javascript\n   * const client = new ContainerRegistryClient(url, credential);\n   * const repository = client.getRepository(repositoryName)\n   * for await (const manifest of repository.listManifestProperties()) {\n   *   console.log(\"manifest: \", manifest);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```javascript\n   * const iter = repository.listManifestProperties();\n   * let item = await iter.next();\n   * while (!item.done) {\n   *   console.log(\"manifest properties: \", item.value);\n   *   item = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```javascript\n   * const pages = repository.listManifestProperties().byPage({ maxPageSize: 2 });\n   * let page = await pages.next();\n   * let i = 1;\n   * while (!page.done) {\n   *  if (page.value) {\n   *    console.log(`-- page ${i++}`);\n   *    for (const manifestProperties of page.value) {\n   *      console.log(`  manifest properties: ${manifestProperties}`);\n   *    }\n   *  }\n   *  page = await pages.next();\n   * }\n   * ```\n   * @param options -\n   */\n  listManifestProperties(\n    options?: ListManifestPropertiesOptions\n  ): PagedAsyncIterableIterator<ArtifactManifestProperties>;\n}\n\n/**\n * The client class used to interact with the Container Registry service.\n * @internal\n */\nexport class ContainerRepositoryImpl {\n  private readonly client: GeneratedClient;\n  /**\n   * The Azure Container Registry endpoint.\n   */\n  public readonly registryEndpoint: string;\n  /**\n   * Repository name.\n   */\n  public readonly name: string;\n\n  /**\n   * Creates an instance of a ContainerRepository.\n   * @param registryEndpoint - the URL to the Container Registry endpoint\n   * @param name - the name of the repository\n   * @param client - the generated client that interacts with service\n   */\n  constructor(registryEndpoint: string, name: string, client: GeneratedClient) {\n    this.registryEndpoint = registryEndpoint;\n    this.name = name;\n\n    this.client = client;\n  }\n\n  /**\n   * Deletes this repository and all artifacts that are part of its logical group.\n   *\n   * @param options - optional configuration for the operation\n   */\n  public async delete(options: DeleteRepositoryOptions = {}): Promise<void> {\n    return tracingClient.withSpan(\n      \"ContainerRepositoryImpl.delete\",\n      options,\n      async (updatedOptions) => {\n        await this.client.containerRegistry.deleteRepository(this.name, updatedOptions);\n      }\n    );\n  }\n\n  /**\n   * Returns an helper instance of {@link RegistryArtifact} for the given tag or digest.\n   * @param tagOrDigest - the tag or digest of the artifact\n   */\n  public getArtifact(tagOrDigest: string): RegistryArtifact {\n    if (!tagOrDigest) {\n      throw new Error(\"invalid tagOrDigest\");\n    }\n    return new RegistryArtifactImpl(this.registryEndpoint, this.name, tagOrDigest, this.client);\n  }\n\n  /**\n   * Retrieves the properties of this repository.\n   * @param options -\n   */\n  public async getProperties(\n    options: GetRepositoryPropertiesOptions = {}\n  ): Promise<ContainerRepositoryProperties> {\n    return tracingClient.withSpan(\n      \"ContainerRepositoryImpl.getProperties\",\n      options,\n      (updatedOptions) => {\n        return this.client.containerRegistry.getProperties(this.name, updatedOptions);\n      }\n    );\n  }\n\n  /**\n   * Updates the properties of this repository.\n   *\n   * Example usage:\n   *\n   * ```javascript\n   * const client = new ContainerRegistryClient(url, credential);\n   * const repository = client.getRepository(repositoryName)\n   * const updated = await repository.updateProperties({\n   *   canDelete: false,\n   *   canList: false,\n   *   canRead: false,\n   *   canWrite: false\n   * });\n   * ```\n   * @param options -\n   */\n  public async updateProperties(\n    options: UpdateRepositoryPropertiesOptions\n  ): Promise<ContainerRepositoryProperties> {\n    const value: RepositoryWriteableProperties = {\n      canDelete: options.canDelete,\n      canWrite: options.canWrite,\n      canList: options.canList,\n      canRead: options.canRead,\n    };\n\n    return tracingClient.withSpan(\n      \"ContainerRepositoryImpl.updateProperties\",\n      { ...options, value },\n      (updatedOptions) => {\n        return this.client.containerRegistry.updateProperties(this.name, updatedOptions);\n      }\n    );\n  }\n\n  /**\n   * Returns an async iterable iterator to list manifest properties.\n   * This is useful for determining the collection of artifacts associated with\n   * this repository, as each artifact is uniquely identified by its manifest.\n   *\n   * Example using `for-await-of` syntax:\n   *\n   * ```javascript\n   * const client = new ContainerRegistryClient(url, credential);\n   * const repository = client.getRepository(repositoryName)\n   * for await (const manifest of repository.listManifestProperties()) {\n   *   console.log(\"manifest: \", manifest);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```javascript\n   * const iter = repository.listManifestProperties();\n   * let item = await iter.next();\n   * while (!item.done) {\n   *   console.log(\"manifest properties: \", item.value);\n   *   item = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```javascript\n   * const pages = repository.listManifestProperties().byPage({ maxPageSize: 2 });\n   * let page = await pages.next();\n   * let i = 1;\n   * while (!page.done) {\n   *  if (page.value) {\n   *    console.log(`-- page ${i++}`);\n   *    for (const manifestProperties of page.value) {\n   *      console.log(`  manifest properties: ${manifestProperties}`);\n   *    }\n   *  }\n   *  page = await pages.next();\n   * }\n   * ```\n   * @param options -\n   */\n  public listManifestProperties(\n    options: ListManifestPropertiesOptions = {}\n  ): PagedAsyncIterableIterator<ArtifactManifestProperties, ManifestPageResponse> {\n    const iter = this.listManifestsItems(options);\n\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) => this.listManifestsPage(settings, options),\n    };\n  }\n\n  private async *listManifestsItems(\n    options: ListManifestPropertiesOptions = {}\n  ): AsyncIterableIterator<ArtifactManifestProperties> {\n    for await (const page of this.listManifestsPage({}, options)) {\n      yield* page;\n    }\n  }\n\n  private async *listManifestsPage(\n    continuationState: PageSettings,\n    options: ListManifestPropertiesOptions = {}\n  ): AsyncIterableIterator<ManifestPageResponse> {\n    const orderby = toServiceManifestOrderBy(options.order);\n    if (!continuationState.continuationToken) {\n      const optionsComplete = {\n        ...options,\n        n: continuationState.maxPageSize,\n        orderby,\n      };\n      const currentPage = await this.client.containerRegistry.getManifests(\n        this.name,\n        optionsComplete\n      );\n      continuationState.continuationToken = extractNextLink(currentPage.link);\n      if (currentPage.manifests) {\n        const array = currentPage.manifests.map((t) =>\n          toArtifactManifestProperties(t, this.name, currentPage.registryLoginServer!)\n        );\n        yield Object.defineProperty(array, \"continuationToken\", {\n          value: continuationState.continuationToken,\n          enumerable: true,\n        });\n      }\n    }\n    while (continuationState.continuationToken) {\n      const currentPage = await this.client.containerRegistry.getManifestsNext(\n        this.name,\n        continuationState.continuationToken,\n        options\n      );\n      continuationState.continuationToken = extractNextLink(currentPage.link);\n      if (currentPage.manifests) {\n        const array = currentPage.manifests.map((t) =>\n          toArtifactManifestProperties(t, this.name, currentPage.registryLoginServer!)\n        );\n        yield Object.defineProperty(array, \"continuationToken\", {\n          value: continuationState.continuationToken,\n          enumerable: true,\n        });\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Base64 decode\n *\n * @internal\n * @param encodedString -\n * @returns\n */\nexport function base64decode(encodedString: string): string {\n  return Buffer.from(encodedString, \"base64\").toString();\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport { GeneratedClient } from \"./generated\";\nimport { base64decode } from \"./utils/base64\";\n\nexport interface ContainerRegistryGetTokenOptions extends GetTokenOptions {\n  service: string;\n}\n\nexport class ContainerRegistryRefreshTokenCredential implements TokenCredential {\n  readonly tokenService: ContainerRegistryTokenService;\n  readonly isAnonymousAccess: boolean;\n  constructor(\n    authClient: GeneratedClient,\n    private authenticationScope: string,\n    private credential?: TokenCredential\n  ) {\n    this.tokenService = new ContainerRegistryTokenService(authClient);\n    this.isAnonymousAccess = !this.credential;\n  }\n\n  async getToken(\n    _scopes: string | string[],\n    options: ContainerRegistryGetTokenOptions\n  ): Promise<AccessToken | null> {\n    if (!this.credential) {\n      return null;\n    }\n\n    const aadToken = await this.credential.getToken(this.authenticationScope, options);\n    if (!aadToken) {\n      throw new Error(\"Failed to retrieve AAD token.\");\n    }\n\n    return this.tokenService.ExchangeAadAccessTokenForAcrRefreshTokenAsync(\n      aadToken.token,\n      options.service,\n      options\n    );\n  }\n}\n\nexport class ContainerRegistryTokenService {\n  constructor(private authClient: GeneratedClient) {}\n\n  async ExchangeAadAccessTokenForAcrRefreshTokenAsync(\n    aadAccessToken: string,\n    service: string,\n    options: GetTokenOptions\n  ): Promise<AccessToken> {\n    const acrRefreshToken =\n      await this.authClient.authentication.exchangeAadAccessTokenForAcrRefreshToken(\n        \"access_token\",\n        service,\n        {\n          ...options,\n          accessToken: aadAccessToken,\n        }\n      );\n    if (!acrRefreshToken.refreshToken) {\n      throw new Error(\"Failed to exchange AAD access token for an ACR refresh token.\");\n    }\n\n    // ACR refresh token expires after three hours\n    const jwtParts = acrRefreshToken.refreshToken.split(\".\");\n    if (jwtParts.length < 3) {\n      throw new Error(\"Invalid JWT structure from ACR refresh token.\");\n    }\n    if (!jwtParts[1]) {\n      throw new Error(\"Invalid JWT payload.\");\n    }\n\n    const jwtPayload = JSON.parse(base64decode(jwtParts[1]));\n    if (!jwtPayload.exp) {\n      throw new Error(\"Invalid JWT payload structure. No expiration.\");\n    }\n\n    // JWT expiry is in seconds\n    const expiry = Number.parseInt(jwtPayload.exp) * 1000;\n    return {\n      token: acrRefreshToken.refreshToken,\n      expiresOnTimestamp: expiry,\n    };\n  }\n\n  async ExchangeAcrRefreshTokenForAcrAccessTokenAsync(\n    acrRefreshToken: string,\n    service: string,\n    scope: string,\n    grantType: \"refresh_token\" | \"password\",\n    options: GetTokenOptions\n  ): Promise<string> {\n    const acrAccessToken =\n      await this.authClient.authentication.exchangeAcrRefreshTokenForAcrAccessToken(\n        service,\n        scope,\n        acrRefreshToken,\n        grantType,\n        options\n      );\n\n    if (!acrAccessToken.accessToken) {\n      throw new Error(\"Failed to exchange ACR refresh token for an ACR access token\");\n    }\n    return acrAccessToken.accessToken;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/// <reference lib=\"esnext.asynciterable\" />\n\nimport { isTokenCredential, TokenCredential } from \"@azure/core-auth\";\nimport {\n  InternalPipelineOptions,\n  bearerTokenAuthenticationPolicy,\n} from \"@azure/core-rest-pipeline\";\nimport { CommonClientOptions, OperationOptions } from \"@azure/core-client\";\n\nimport \"@azure/core-paging\";\nimport { PageSettings, PagedAsyncIterableIterator } from \"@azure/core-paging\";\n\nimport { logger } from \"./logger\";\nimport { GeneratedClient } from \"./generated\";\nimport { tracingClient } from \"./tracing\";\nimport { RepositoryPageResponse } from \"./models\";\nimport { extractNextLink } from \"./utils/helpers\";\nimport { ChallengeHandler } from \"./containerRegistryChallengeHandler\";\nimport {\n  ContainerRepository,\n  ContainerRepositoryImpl,\n  DeleteRepositoryOptions,\n} from \"./containerRepository\";\nimport { RegistryArtifact } from \"./registryArtifact\";\nimport { ContainerRegistryRefreshTokenCredential } from \"./containerRegistryTokenCredential\";\n\nconst LATEST_API_VERSION = \"2021-07-01\";\n\n/**\n * Client options used to configure Container Registry Repository API requests.\n */\nexport interface ContainerRegistryClientOptions extends CommonClientOptions {\n  /**\n   * Gets or sets the audience to use for authentication with Azure Active Directory.\n   * The authentication scope will be set from this audience.\n   * See {@link KnownContainerRegistryAudience} for known audience values.\n   */\n  audience?: string;\n  /**\n   * The version of service API to make calls against.\n   */\n  serviceVersion?: \"2021-07-01\";\n}\n\n/**\n * Options for the `listRepositories` method of `ContainerRegistryClient`.\n */\nexport interface ListRepositoriesOptions extends OperationOptions {}\n\n/**\n * The client class used to interact with the Container Registry service.\n */\nexport class ContainerRegistryClient {\n  /**\n   * The Azure Container Registry endpoint.\n   */\n  public readonly endpoint: string;\n\n  private client: GeneratedClient;\n\n  /**\n   * Creates an instance of a ContainerRegistryClient.\n   *\n   * Example usage:\n   * ```ts\n   * import { ContainerRegistryClient } from \"@azure/container-registry\";\n   * import { DefaultAzureCredential} from \"@azure/identity\";\n   *\n   * const client = new ContainerRegistryClient(\n   *    \"<container registry API endpoint>\",\n   *    new DefaultAzureCredential()\n   * );\n   * ```\n   * @param endpoint - the URL endpoint of the container registry\n   * @param credential - used to authenticate requests to the service\n   * @param options - optional configuration used to send requests to the service\n   */\n  constructor(\n    endpoint: string,\n    credential: TokenCredential,\n    options?: ContainerRegistryClientOptions\n  );\n\n  /**\n   * Creates an instance of a ContainerRegistryClient to interact with\n   * an Azure Container Registry that has anonymous pull access enabled.\n   * Only operations that support anonymous access are enabled. Other service\n   * methods will throw errors.\n   *\n   * Example usage:\n   * ```ts\n   * import { ContainerRegistryClient } from \"@azure/container-registry\";\n   *\n   * const client = new ContainerRegistryClient(\n   *    \"<container registry API endpoint>\",\n   * );\n   * ```\n   * @param endpoint - the URL endpoint of the container registry\n   * @param options - optional configuration used to send requests to the service\n   */\n  constructor(endpoint: string, options?: ContainerRegistryClientOptions);\n\n  constructor(\n    endpoint: string,\n    credentialOrOptions?: TokenCredential | ContainerRegistryClientOptions,\n    clientOptions: ContainerRegistryClientOptions = {}\n  ) {\n    if (!endpoint) {\n      throw new Error(\"invalid endpoint\");\n    }\n\n    this.endpoint = endpoint;\n\n    let credential: TokenCredential | undefined;\n    let options: ContainerRegistryClientOptions | undefined;\n    if (isTokenCredential(credentialOrOptions)) {\n      credential = credentialOrOptions;\n      options = clientOptions;\n    } else {\n      options = credentialOrOptions ?? {};\n    }\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...options,\n      loggingOptions: {\n        logger: logger.info,\n        // This array contains header names we want to log that are not already\n        // included as safe. Unknown/unsafe headers are logged as \"<REDACTED>\".\n        additionalAllowedQueryParameters: [\"last\", \"n\", \"orderby\", \"digest\"],\n      },\n    };\n\n    const defaultScope = `${options.audience ?? \"https://containerregistry.azure.net\"}/.default`;\n    const serviceVersion = options.serviceVersion ?? LATEST_API_VERSION;\n    const authClient = new GeneratedClient(endpoint, serviceVersion, internalPipelineOptions);\n    this.client = new GeneratedClient(endpoint, serviceVersion, internalPipelineOptions);\n    this.client.pipeline.addPolicy(\n      bearerTokenAuthenticationPolicy({\n        credential,\n        scopes: [defaultScope],\n        challengeCallbacks: new ChallengeHandler(\n          new ContainerRegistryRefreshTokenCredential(authClient, defaultScope, credential)\n        ),\n      })\n    );\n  }\n\n  /**\n   * Deletes the repository identified by the given name and all associated artifacts.\n   *\n   * @param repositoryName - the name of repository to delete\n   * @param options - optional configuration for the operation\n   */\n  public async deleteRepository(\n    repositoryName: string,\n    options: DeleteRepositoryOptions = {}\n  ): Promise<void> {\n    if (!repositoryName) {\n      throw new Error(\"invalid repositoryName\");\n    }\n\n    return tracingClient.withSpan(\n      \"ContainerRegistryClient.deleteRepository\",\n      options,\n      async (updatedOptions) => {\n        await this.client.containerRegistry.deleteRepository(repositoryName, updatedOptions);\n      }\n    );\n  }\n\n  /**\n   * Returns an instance of {@link RegistryArtifact} for calling service methods related to the artifact specified by `repositoryName` and `tagOrDigest`.\n   *\n   * @param repositoryName - the name of repository\n   * @param tagOrDigest - tag or digest of the artifact to retrieve\n   */\n  public getArtifact(repositoryName: string, tagOrDigest: string): RegistryArtifact {\n    if (!repositoryName) {\n      throw new Error(\"invalid repositoryName\");\n    }\n    if (!tagOrDigest) {\n      throw new Error(\"invalid tagOrDigest\");\n    }\n\n    return new ContainerRepositoryImpl(this.endpoint, repositoryName, this.client).getArtifact(\n      tagOrDigest\n    );\n  }\n\n  /**\n   * Returns an instance of {@link ContainerRepository} for calling service methods related to the repository specified by `repositoryName`.\n   *\n   * @param repositoryName - the name of repository\n   */\n  public getRepository(repositoryName: string): ContainerRepository {\n    if (!repositoryName) {\n      throw new Error(\"invalid repositoryName\");\n    }\n\n    return new ContainerRepositoryImpl(this.endpoint, repositoryName, this.client);\n  }\n\n  /**\n   * Returns an async iterable iterator to list names of repositories in this registry.\n   *\n   * Example usage:\n   * ```javascript\n   * let client = new ContainerRegistryClient(url, credential);\n   * for await (const repository of client.listRepositoryNames()) {\n   *   console.log(\"repository name: \", repository);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```javascript\n   * let iter = client.listRepositoryNames();\n   * let item = await iter.next();\n   * while (!item.done) {\n   *   console.log(`repository name: ${item.value}`);\n   *   item = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```javascript\n   * const pages = client.listRepositoryNames().byPage({ maxPageSize: 2 });\n   * let page = await pages.next();\n   * let i = 1;\n   * while (!page.done) {\n   *  if (page.value) {\n   *    console.log(`-- page ${i++}`);\n   *    for (const name of page.value) {\n   *      console.log(`  repository name: ${name}`);\n   *    }\n   *  }\n   *  page = await pages.next();\n   * }\n   * ```\n   * @param options -\n   */\n  public listRepositoryNames(\n    options: ListRepositoriesOptions = {}\n  ): PagedAsyncIterableIterator<string, RepositoryPageResponse> {\n    const iter = this.listRepositoryItems(options);\n\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) => this.listRepositoriesPage(settings, options),\n    };\n  }\n\n  private async *listRepositoryItems(\n    options: ListRepositoriesOptions = {}\n  ): AsyncIterableIterator<string> {\n    for await (const page of this.listRepositoriesPage({}, options)) {\n      yield* page;\n    }\n  }\n\n  private async *listRepositoriesPage(\n    continuationState: PageSettings,\n    options: ListRepositoriesOptions = {}\n  ): AsyncIterableIterator<RepositoryPageResponse> {\n    if (!continuationState.continuationToken) {\n      const optionsComplete = {\n        ...options,\n        n: continuationState.maxPageSize,\n      };\n      const currentPage = await this.client.containerRegistry.getRepositories(optionsComplete);\n      continuationState.continuationToken = extractNextLink(currentPage.link);\n      if (currentPage.repositories) {\n        const array = currentPage.repositories;\n        yield Object.defineProperty(array, \"continuationToken\", {\n          value: continuationState.continuationToken,\n          enumerable: true,\n        });\n      }\n    }\n    while (continuationState.continuationToken) {\n      const currentPage = await this.client.containerRegistry.getRepositoriesNext(\n        continuationState.continuationToken,\n        options\n      );\n      continuationState.continuationToken = extractNextLink(currentPage.link);\n      if (currentPage.repositories) {\n        const array = currentPage.repositories;\n        yield Object.defineProperty(array, \"continuationToken\", {\n          value: continuationState.continuationToken,\n          enumerable: true,\n        });\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport { ContainerRepositoryProperties, ArtifactTagProperties } from \"./generated\";\n\nimport { ArtifactTagProperties } from \"./generated\";\n\n/**\n * Defines known cloud audiences for Azure Container Registry.\n */\nexport enum KnownContainerRegistryAudience {\n  /** Azure China */\n  AzureResourceManagerChina = \"https://management.chinacloudapi.cn\",\n  /**\n   * Azure Germany\n   * @deprecated Azure Germany is being deprecated in favor of standard nonsovereign Azure regions in Germany.\n   */\n  AzureResourceManagerGermany = \"https://management.microsoftazure.de\",\n  /** Azure Government */\n  AzureResourceManagerGovernment = \"https://management.usgovcloudapi.net\",\n  /** Azure Public Cloud */\n  AzureResourceManagerPublicCloud = \"https://management.azure.com\",\n}\n\n/**\n * Defines known artifact architectures that the service supports.\n */\nexport enum KnownArtifactArchitecture {\n  /** i386 */\n  I386 = \"386\",\n  /** AMD64 */\n  Amd64 = \"amd64\",\n  /** ARM */\n  Arm = \"arm\",\n  /** ARM64 */\n  Arm64 = \"arm64\",\n  /** MIPS */\n  Mips = \"mips\",\n  /** MIPSLE */\n  MipsLe = \"mipsle\",\n  /** MIPS64 */\n  Mips64 = \"mips64\",\n  /** MIPS64LE */\n  Mips64Le = \"mips64le\",\n  /** PPC64 */\n  Ppc64 = \"ppc64\",\n  /** PPC64LE */\n  Ppc64Le = \"ppc64le\",\n  /** RISCv64 */\n  RiscV64 = \"riscv64\",\n  /** s390x */\n  S390X = \"s390x\",\n  /** Wasm */\n  Wasm = \"wasm\",\n}\n\n/**\n * Defines known artifact platform's operating systems that the service supports.\n */\nexport enum KnownArtifactOperatingSystem {\n  /** Aix */\n  Aix = \"aix\",\n  /** Android */\n  Android = \"android\",\n  /** Darwin */\n  Darwin = \"darwin\",\n  /** Dragonfly */\n  Dragonfly = \"dragonfly\",\n  /** FreeBSD */\n  FreeBsd = \"freebsd\",\n  /** Illumos */\n  Illumos = \"illumos\",\n  /** iOS */\n  iOS = \"ios\",\n  /** JS */\n  JS = \"js\",\n  /** Linux */\n  Linux = \"linux\",\n  /** NetBSD */\n  NetBsd = \"netbsd\",\n  /** OpenBSD */\n  OpenBsd = \"openbsd\",\n  /** Plan9 */\n  Plan9 = \"plan9\",\n  /** Solaris */\n  Solaris = \"solaris\",\n  /** Windows */\n  Windows = \"windows\",\n}\n\n/** Manifest attributes details */\nexport interface ArtifactManifestPlatform {\n  /**\n   * Manifest digest\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly digest: string;\n  /**\n   * CPU architecture. See {@link KnownArtifactArchitecture} for values supported by the service.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly architecture?: string;\n  /**\n   * Operating system. See {@link KnownArtifactOperatingSystem} for values supported by the service.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly operatingSystem?: string;\n}\n\n/** Manifest attributes details */\nexport interface ArtifactManifestProperties {\n  /**\n   * Registry login server name.  This is likely to be similar to <registry-name>.azurecr.io\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly registryLoginServer: string;\n  /**\n   * Repository name\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly repositoryName: string;\n  /**\n   * Manifest\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly digest: string;\n  /**\n   * Image size\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly sizeInBytes?: number;\n  /**\n   * Created time\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly createdOn: Date;\n  /**\n   * Last update time\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly lastUpdatedOn: Date;\n  /**\n   * CPU architecture. See {@link KnownArtifactArchitecture} for values supported by the service.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly architecture?: string;\n  /**\n   * Operating system. See {@link KnownArtifactOperatingSystem} for values supported by the service.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly operatingSystem?: string;\n  /**\n   * List of manifests referenced by this manifest list.  List will be empty if this manifest is not a manifest list.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly relatedArtifacts: ArtifactManifestPlatform[];\n  /**\n   * List of tags\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly tags: string[];\n  /** Delete enabled */\n  canDelete?: boolean;\n  /** Write enabled */\n  canWrite?: boolean;\n  /** List enabled */\n  canList?: boolean;\n  /** Read enabled */\n  canRead?: boolean;\n}\n\n/**\n * Defines values for ArtifactTagOrder.\n *  this contains the known values that the service supports.\n * ### Know values supported by the service\n * **LastUpdatedOnDescending**: Order tags by LastUpdatedOn field, from most recently updated to least recently updated.\n * **LastUpdatedOnAscending**: Order tags by LastUpdatedOn field, from least recently updated to most recently updated.\n */\nexport type ArtifactTagOrder = \"LastUpdatedOnDescending\" | \"LastUpdatedOnAscending\";\n\n/**\n * Defines values for ArtifactManifestOrder.\n *  this contains the known values that the service supports.\n * ### Know values supported by the service\n * **LastUpdatedOnDescending**: Order registry artifacts by LastUpdatedOn field, from most recently updated to least recently updated.\n * **LastUpdatedOnAscending**: Order  registry artifacts by LastUpdatedOn field, from least recently updated to most recently updated.\n */\nexport type ArtifactManifestOrder = \"LastUpdatedOnDescending\" | \"LastUpdatedOnAscending\";\n\n/**\n * Contains response data for the listRepositoryNames operation.\n */\nexport interface RepositoryPageResponse extends Array<string> {\n  /**\n   * Continuation token to pass to `byPage()` to resume listing of more results if available.\n   */\n  continuationToken?: string;\n}\n\n/**\n * Contains response data for the listManifests operation.\n */\nexport interface ManifestPageResponse extends Array<ArtifactManifestProperties> {\n  /**\n   * Continuation token to pass to `byPage()` to resume listing of more results if available.\n   */\n  continuationToken?: string;\n}\n\n/**\n * Contains response data for the listTags operation.\n */\nexport interface TagPageResponse extends Array<ArtifactTagProperties> {\n  /**\n   * Continuation token to pass to `byPage()` to resume listing of more results if available.\n   */\n  continuationToken?: string;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationOptions } from \"@azure/core-client\";\n\n/**\n * Options for configuring the upload manifest operation.\n */\nexport interface SetManifestOptions extends OperationOptions {\n  /**\n   * Media type of the uploaded manifest\n   */\n  mediaType?: string;\n\n  /**\n   * Tag to give the uploaded manifest\n   */\n  tag?: string;\n}\n\n/**\n * The result from uploading a blob to the registry.\n */\nexport interface UploadBlobResult {\n  /**\n   * The digest of the uploaded blob.\n   */\n  digest: string;\n\n  /**\n   * The size of the uploaded blob in bytes.\n   */\n  sizeInBytes: number;\n}\n\n/**\n * The result from downloading a manifest from the registry.\n */\nexport interface GetManifestResult {\n  /**\n   * The digest of the downloaded manifest as calculated by the registry.\n   */\n  digest: string;\n\n  /**\n   * Media type of the downloaded manifest as indicated by the Content-Type response header.\n   */\n  mediaType: string;\n\n  /**\n   * The raw content of the manifest that was downloaded.\n   */\n  content: Buffer;\n\n  /**\n   * The deserialized manifest\n   */\n  manifest: Record<string, unknown>;\n}\n\n/**\n * The result from downloading a blob from the registry.\n */\nexport interface DownloadBlobResult {\n  /**\n   * The blob's digest, calculated by the resgistry.\n   */\n  digest: string;\n\n  /**\n   * The blob content.\n   */\n  content: NodeJS.ReadableStream;\n}\n\n/**\n * The result from uploading a manifest to the registry.\n */\nexport interface SetManifestResult {\n  /**\n   * The digest of the uploaded manifest, calculated by the registry.\n   */\n  digest: string;\n}\n\n/** Docker V2 image layer descriptor including config and layers. */\nexport interface OciDescriptor {\n  /** Layer media type */\n  mediaType: string;\n  /** Layer size */\n  size: number;\n  /** Layer digest */\n  digest: string;\n  /** Specifies a list of URIs from which this object may be downloaded. */\n  urls?: string[];\n  /** Additional information provided through arbitrary metadata. */\n  annotations?: OciAnnotations;\n}\n\n/**\n * Type representing an OCI image manifest (manifest of media type \"application/vnd.oci.image.manifest.v1+json\").\n * See the specification at https://github.com/opencontainers/image-spec/blob/main/manifest.md for more information.\n */\nexport type OciImageManifest = {\n  /** Schema version */\n  schemaVersion: 2;\n  /** The media type, when used, must be application/vnd.oci.image.manifest.v1+json. */\n  mediaType?: `${KnownManifestMediaType.OciImageManifest}`;\n  /** When the manifest is used for an artifact, the type of said artifact. */\n  artifactType?: string;\n  /** V2 image config descriptor */\n  config: OciDescriptor;\n  /** List of V2 image layer information */\n  layers: OciDescriptor[];\n  /** Additional information provided through arbitrary metadata. */\n  annotations?: OciAnnotations;\n};\n\n/** Additional information provided through arbitrary metadata.\n * See the specification at https://github.com/opencontainers/image-spec/blob/main/annotations.md for more information.\n */\nexport interface OciAnnotations extends Record<string, unknown> {\n  /** Date and time on which the image was built (string, date-time as defined by https://tools.ietf.org/html/rfc3339#section-5.6) */\n  \"org.opencontainers.image.created\"?: string;\n  /** Contact details of the people or organization responsible for the image. */\n  \"org.opencontainers.image.authors\"?: string;\n  /** URL to find more information on the image. */\n  \"org.opencontainers.image.url\"?: string;\n  /** URL to get documentation on the image. */\n  \"org.opencontainers.image.documentation\"?: string;\n  /** URL to get source code for building the image. */\n  \"org.opencontainers.image.source\"?: string;\n  /** Version of the packaged software. The version MAY match a label or tag in the source code repository, may also be Semantic versioning-compatible */\n  \"org.opencontainers.image.version\"?: string;\n  /** Source control revision identifier for the packaged software. */\n  \"org.opencontainers.image.revision\"?: string;\n  /** Name of the distributing entity, organization or individual. */\n  \"org.opencontainers.image.vendor\"?: string;\n  /** License(s) under which contained software is distributed as an SPDX License Expression. */\n  \"org.opencontainers.image.licenses\"?: string;\n  /** Name of the reference for a target. */\n  \"org.opencontainers.image.ref.name\"?: string;\n  /** Human-readable title of the image */\n  \"org.opencontainers.image.title\"?: string;\n  /** Human-readable description of the software packaged in the image */\n  \"org.opencontainers.image.description\"?: string;\n}\n\n/**\n * Options for confguring the delete blob operation.\n */\nexport interface DeleteBlobOptions extends OperationOptions {}\n\n/**\n * Options for confguring the delete manifest operation.\n */\nexport interface DeleteManifestOptions extends OperationOptions {}\n\n/**\n * Options for configuring the upload blob operation.\n */\nexport interface UploadBlobOptions extends OperationOptions {}\n\n/**\n * Options for confguring the download blob operation.\n */\nexport interface DownloadBlobOptions extends OperationOptions {}\n\n/**\n * Options for confguring the download manifest operation.\n */\nexport interface GetManifestOptions extends OperationOptions {}\n\n/**\n * Known media type values for Docker and OCI manifests.\n */\nexport enum KnownManifestMediaType {\n  /**\n   * The media type for an OCI image manifest. This format is described at https://github.com/opencontainers/image-spec/blob/main/manifest.md.\n   */\n  OciImageManifest = \"application/vnd.oci.image.manifest.v1+json\",\n\n  /**\n   * The media type for a Docker Image Manifest, Version 2, Schema 2. This format is described at https://docs.docker.com/registry/spec/manifest-v2-2/.\n   */\n  DockerManifest = \"application/vnd.docker.distribution.manifest.v2+json\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport crypto from \"crypto\";\n\nexport function calculateDigest(buffer: Buffer): Promise<string>;\n\nexport function calculateDigest(stream: NodeJS.ReadableStream): Promise<string>;\n\nexport function calculateDigest(bufferOrStream: NodeJS.ReadableStream | Buffer): Promise<string> {\n  const hash = crypto.createHash(\"sha256\");\n  if (Buffer.isBuffer(bufferOrStream)) {\n    return Promise.resolve(`sha256:${hash.update(bufferOrStream).digest(\"hex\")}`);\n  } else {\n    bufferOrStream.pipe(hash);\n    return new Promise((resolve, reject) => {\n      bufferOrStream.on(\"end\", () => {\n        hash.end();\n        resolve(`sha256:${hash.digest(\"hex\")}`);\n      });\n      bufferOrStream.on(\"error\", (err) => reject(err));\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError } from \"@azure/abort-controller\";\nimport { TransferProgressEvent } from \"@azure/core-rest-pipeline\";\nimport { Readable } from \"stream\";\n\nexport type ReadableStreamGetter = (offset: number) => Promise<NodeJS.ReadableStream>;\n\nexport interface RetriableReadableStreamOptions {\n  /**\n   * Max retry count (greater than or equal to 0), undefined or invalid value means no retry\n   */\n  maxRetryRequests?: number;\n\n  /**\n   * Read progress event handler\n   */\n  onProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * On data event handler\n   */\n  onData?: (data: Buffer) => void;\n\n  /**\n   * On end (success) event handler\n   */\n  onEnd?: () => void;\n\n  /**\n   * Debug purpose only. Used to inject an unexpected end to existing internal stream,\n   * to test stream retry works well or not.\n   *\n   * When assign it to true, for next incoming \"data\" event of internal stream,\n   * RetriableReadableStream will try to emit an \"end\" event to existing internal\n   * stream to force it end and start retry from the breaking point.\n   * The value will then update to \"undefined\", once the injection works.\n   */\n  doInjectErrorOnce?: boolean;\n\n  /**\n   * A threshold, not a limit. Dictates the amount of data that a stream buffers before it stops asking for more data.\n   */\n  highWaterMark?: number;\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * A Node.js ReadableStream will internally retry when internal ReadableStream unexpected ends.\n */\nexport class RetriableReadableStream extends Readable {\n  private start: number;\n  private end: number;\n  private retries: number = 0;\n  private maxRetryRequests: number;\n  private onData?: (data: Buffer) => void;\n  private onEnd?: () => void;\n  private onProgress?: (progress: TransferProgressEvent) => void;\n  private options: RetriableReadableStreamOptions;\n\n  /**\n   * Creates an instance of RetriableReadableStream.\n   *\n   * @param source - The current ReadableStream returned from getter\n   * @param getter - A method calling downloading request returning\n   *                                      a new ReadableStream from specified offset\n   * @param offset - Offset position in original data source to read\n   * @param count - How much data in original data source to read\n   * @param options -\n   */\n  public constructor(\n    private source: NodeJS.ReadableStream,\n    private getter: ReadableStreamGetter,\n    private offset: number,\n    count: number,\n    options: RetriableReadableStreamOptions = {}\n  ) {\n    super({ highWaterMark: options.highWaterMark });\n    this.getter = getter;\n    this.start = offset;\n    this.end = offset + count - 1;\n    this.maxRetryRequests =\n      options.maxRetryRequests && options.maxRetryRequests >= 0 ? options.maxRetryRequests : 0;\n    this.onData = options.onData;\n    this.onEnd = options.onEnd;\n    this.onProgress = options.onProgress;\n    this.options = options;\n\n    this.setSourceEventHandlers();\n  }\n\n  public _read(): void {\n    this.source.resume();\n  }\n\n  private setSourceEventHandlers() {\n    this.source.on(\"data\", this.sourceDataHandler);\n    this.source.on(\"end\", this.sourceErrorOrEndHandler);\n    this.source.on(\"error\", this.sourceErrorOrEndHandler);\n    // needed for Node14\n    this.source.on(\"aborted\", this.sourceAbortedHandler);\n  }\n\n  private removeSourceEventHandlers() {\n    this.source.removeListener(\"data\", this.sourceDataHandler);\n    this.source.removeListener(\"end\", this.sourceErrorOrEndHandler);\n    this.source.removeListener(\"error\", this.sourceErrorOrEndHandler);\n    this.source.removeListener(\"aborted\", this.sourceAbortedHandler);\n  }\n\n  private sourceDataHandler = (data: Buffer) => {\n    if (this.options.doInjectErrorOnce) {\n      this.options.doInjectErrorOnce = undefined;\n      this.source.pause();\n      this.sourceErrorOrEndHandler();\n      (this.source as Readable).destroy();\n      return;\n    }\n\n    this.offset += data.length;\n\n    if (this.offset > this.end + 1) {\n      this.destroy(\n        new Error(\n          `Data corruption failure: Received more data than original request, data needed offset is ${\n            this.end\n          }, received offset: ${this.offset - 1}`\n        )\n      );\n    }\n\n    this.onData?.(data);\n    this.onProgress?.({ loadedBytes: this.offset - this.start });\n\n    if (!this.push(data)) {\n      this.source.pause();\n    }\n  };\n\n  private sourceAbortedHandler = () => {\n    const abortError = new AbortError(\"The operation was aborted.\");\n    this.destroy(abortError);\n  };\n\n  private sourceErrorOrEndHandler = (err?: Error) => {\n    if (err && err.name === \"AbortError\") {\n      this.destroy(err);\n      return;\n    }\n\n    this.removeSourceEventHandlers();\n    if (this.offset - 1 === this.end) {\n      this.onEnd?.();\n      this.push(null);\n    } else if (this.offset <= this.end) {\n      if (this.retries < this.maxRetryRequests) {\n        this.retries += 1;\n        this.getter(this.offset)\n          .then((newSource) => {\n            this.source = newSource;\n            this.setSourceEventHandlers();\n            return;\n          })\n          .catch((error) => {\n            this.destroy(error);\n          });\n      } else {\n        this.destroy(\n          new Error(\n            `Data corruption failure: received less data than required and reached maxRetires limitation. Received data offset: ${\n              this.offset - 1\n            }, data needed offset: ${this.end}, retries: ${this.retries}, max retries: ${\n              this.maxRetryRequests\n            }`\n          )\n        );\n      }\n    } else {\n      this.destroy(\n        new Error(\n          `Data corruption failure: Received more data than original request, data needed offset is ${\n            this.end\n          }, received offset: ${this.offset - 1}`\n        )\n      );\n    }\n  };\n\n  _destroy(error: Error | null, callback: (error?: Error) => void): void {\n    // remove listener from source and release source\n    this.removeSourceEventHandlers();\n    (this.source as Readable).destroy();\n\n    callback(error === null ? undefined : error);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  InternalPipelineOptions,\n  bearerTokenAuthenticationPolicy,\n  RestError,\n} from \"@azure/core-rest-pipeline\";\nimport { TokenCredential } from \"@azure/core-auth\";\nimport { GeneratedClient } from \"../generated\";\nimport { ChallengeHandler } from \"../containerRegistryChallengeHandler\";\nimport { ContainerRegistryRefreshTokenCredential } from \"../containerRegistryTokenCredential\";\nimport { logger } from \"../logger\";\nimport { calculateDigest } from \"../utils/digest\";\nimport {\n  DeleteBlobOptions,\n  DeleteManifestOptions,\n  DownloadBlobOptions,\n  DownloadBlobResult,\n  GetManifestOptions,\n  GetManifestResult,\n  KnownManifestMediaType,\n  UploadBlobOptions,\n  UploadBlobResult,\n  SetManifestOptions,\n  SetManifestResult,\n  OciImageManifest,\n} from \"./models\";\nimport { CommonClientOptions } from \"@azure/core-client\";\nimport { isDigest, readChunksFromStream, readStreamToEnd } from \"../utils/helpers\";\nimport { Readable } from \"stream\";\nimport { tracingClient } from \"../tracing\";\nimport crypto from \"crypto\";\nimport { RetriableReadableStream } from \"../utils/retriableReadableStream\";\n\nconst LATEST_API_VERSION = \"2021-07-01\";\n\nconst CHUNK_SIZE = 4 * 1024 * 1024; // 4 MB\nconst MAX_MANIFEST_SIZE_BYTES = 4 * 1024 * 1024; // 4 MB\n\nconst ACCEPTED_MANIFEST_MEDIA_TYPES = [\n  KnownManifestMediaType.OciImageManifest,\n  KnownManifestMediaType.DockerManifest,\n  \"application/vnd.oci.image.index.v1+json\",\n  \"application/vnd.docker.distribution.manifest.list.v2+json\",\n  \"application/vnd.docker.container.image.v1+json\",\n];\n\nfunction isReadableStream(body: any): body is NodeJS.ReadableStream {\n  return body && typeof body.pipe === \"function\";\n}\n\nfunction assertHasProperty<T, U extends keyof T>(\n  obj: T,\n  property: U\n): asserts obj is T & Required<Pick<T, U>> {\n  if (!Object.prototype.hasOwnProperty.call(obj, property)) {\n    throw new RestError(`Expected property ${String(property)} to be defined.`);\n  }\n}\n\n/**\n * Error thrown when the Docker content digest returned from the\n * server does not match the digest calculated from the content.\n */\nexport class DigestMismatchError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"DigestMismatchError\";\n  }\n}\n\n/**\n * Client options used to configure Container Registry Blob API requests.\n */\nexport interface ContainerRegistryContentClientOptions extends CommonClientOptions {\n  /**\n   * Gets or sets the audience to use for authentication with Azure Active Directory.\n   * The authentication scope will be set from this audience.\n   * See {@link KnownContainerRegistryAudience} for known audience values.\n   */\n  audience?: string;\n  /**\n   * The version of service API to make calls against.\n   */\n  serviceVersion?: \"2021-07-01\";\n}\n\n/**\n * The Azure Container Registry blob client, responsible for uploading and downloading blobs and manifests, the building blocks of artifacts.\n */\nexport class ContainerRegistryContentClient {\n  /**\n   * The Azure Container Registry endpoint.\n   */\n  public readonly endpoint: string;\n\n  /**\n   * The name of the repository that logically groups the artifact parts.\n   */\n  public readonly repositoryName: string;\n\n  private client: GeneratedClient;\n\n  /**\n   * Creates an instance of a ContainerRegistryContentClient for managing container images and artifacts.\n   *\n   * Example usage:\n   * ```ts\n   * import { ContainerRegistryContentClient } from \"@azure/container-registry\";\n   * import { DefaultAzureCredential} from \"@azure/identity\";\n   *\n   * const client = new ContainerRegistryContentClient(\n   *    \"<container registry API endpoint>\",\n   *    \"<repository name>\",\n   *    new DefaultAzureCredential()\n   * );\n   * ```\n   * @param endpoint - the URL endpoint of the container registry\n   * @param repositoryName - the name of the repository that logically groups the artifact parts\n   * @param credential - used to authenticate requests to the service\n   * @param options - optional configuration used to send requests to the service\n   */\n  constructor(\n    endpoint: string,\n    repositoryName: string,\n    credential: TokenCredential,\n    options: ContainerRegistryContentClientOptions = {}\n  ) {\n    if (!endpoint) {\n      throw new Error(\"invalid endpoint\");\n    }\n\n    this.endpoint = endpoint;\n    this.repositoryName = repositoryName;\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...options,\n      loggingOptions: {\n        logger: logger.info,\n        // This array contains header names we want to log that are not already\n        // included as safe. Unknown/unsafe headers are logged as \"<REDACTED>\".\n        additionalAllowedQueryParameters: [\n          \"last\",\n          \"n\",\n          \"orderby\",\n          \"digest\",\n          \"_nouploadcache\",\n          \"_state\",\n        ],\n      },\n    };\n\n    const defaultScope = `${options.audience ?? \"https://containerregistry.azure.net\"}/.default`;\n    const serviceVersion = options.serviceVersion ?? LATEST_API_VERSION;\n    const authClient = new GeneratedClient(endpoint, serviceVersion, internalPipelineOptions);\n    this.client = new GeneratedClient(endpoint, serviceVersion, internalPipelineOptions);\n    this.client.pipeline.addPolicy(\n      bearerTokenAuthenticationPolicy({\n        credential,\n        scopes: [defaultScope],\n        challengeCallbacks: new ChallengeHandler(\n          new ContainerRegistryRefreshTokenCredential(authClient, defaultScope, credential)\n        ),\n      })\n    );\n  }\n\n  /**\n   * Delete a blob.\n   * @param digest - the digest of the blob to delete\n   * @param options - optional configuration used to send requests to the service\n   */\n  public async deleteBlob(digest: string, options: DeleteBlobOptions = {}): Promise<void> {\n    return tracingClient.withSpan(\n      \"ContainerRegistryContentClient.deleteBlob\",\n      options,\n      async (updatedOptions) => {\n        await this.client.containerRegistryBlob.deleteBlob(\n          this.repositoryName,\n          digest,\n          updatedOptions\n        );\n      }\n    );\n  }\n\n  /**\n   * Upload a manifest for an OCI artifact.\n   *\n   * @param manifest - the manifest to upload.\n   */\n  public async setManifest(\n    manifest: Buffer | NodeJS.ReadableStream | OciImageManifest | Record<string, unknown>,\n    options: SetManifestOptions = {}\n  ): Promise<SetManifestResult> {\n    return tracingClient.withSpan(\n      \"ContainerRegistryContentClient.uploadManifest\",\n      options,\n      async (updatedOptions) => {\n        let manifestBody: Buffer | (() => NodeJS.ReadableStream);\n        let tagOrDigest: string | undefined = options?.tag;\n\n        if (Buffer.isBuffer(manifest)) {\n          manifestBody = manifest;\n          tagOrDigest ??= await calculateDigest(manifest);\n        } else if (isReadableStream(manifest)) {\n          manifestBody = await readStreamToEnd(manifest);\n          tagOrDigest ??= await calculateDigest(manifestBody);\n        } else {\n          manifestBody = Buffer.from(JSON.stringify(manifest));\n          tagOrDigest ??= await calculateDigest(manifestBody);\n        }\n\n        const createManifestResult = await this.client.containerRegistry.createManifest(\n          this.repositoryName,\n          tagOrDigest,\n          manifestBody,\n          {\n            contentType: options?.mediaType ?? KnownManifestMediaType.OciImageManifest,\n            ...updatedOptions,\n          }\n        );\n\n        assertHasProperty(createManifestResult, \"dockerContentDigest\");\n\n        return { digest: createManifestResult.dockerContentDigest };\n      }\n    );\n  }\n\n  /**\n   * Downloads the manifest for an OCI artifact.\n   *\n   * @param tagOrDigest - a tag or digest that identifies the artifact\n   * @returns - the downloaded manifest.\n   */\n  public async getManifest(\n    tagOrDigest: string,\n    options: GetManifestOptions = {}\n  ): Promise<GetManifestResult> {\n    return tracingClient.withSpan(\n      \"ContainerRegistryContentClient.downloadManifest\",\n      options,\n      async (updatedOptions) => {\n        const response = await this.client.containerRegistry.getManifest(\n          this.repositoryName,\n          tagOrDigest,\n          {\n            accept: ACCEPTED_MANIFEST_MEDIA_TYPES.join(\", \"),\n            ...updatedOptions,\n          }\n        );\n\n        assertHasProperty(response, \"mediaType\");\n\n        const content = response.readableStreamBody\n          ? await readStreamToEnd(response.readableStreamBody, MAX_MANIFEST_SIZE_BYTES)\n          : Buffer.alloc(0);\n\n        const expectedDigest = await calculateDigest(content);\n\n        if (isDigest(tagOrDigest) && expectedDigest !== tagOrDigest) {\n          throw new DigestMismatchError(\n            \"Digest of downloaded manifest does not match the input digest\"\n          );\n        }\n\n        if (response.dockerContentDigest !== expectedDigest) {\n          throw new DigestMismatchError(\n            \"Computed digest of downloaded manifest does not match the value of the Docker-Content-Digest header\"\n          );\n        }\n\n        return {\n          digest: response.dockerContentDigest,\n          mediaType: response.mediaType,\n          content,\n          manifest: JSON.parse(content.toString(\"utf-8\")),\n        };\n      }\n    );\n  }\n\n  /**\n   * Delete a manifest. Doing so effectively deletes an artifact from the registry.\n   *\n   * @param digest - the digest of the manifest to delete\n   * @param options - optional configuration used to send requests to the service\n   */\n  public async deleteManifest(digest: string, options: DeleteManifestOptions = {}): Promise<void> {\n    return tracingClient.withSpan(\n      \"ContainerRegistryContentClient.deleteManifest\",\n      options,\n      async (updatedOptions) => {\n        await this.client.containerRegistry.deleteManifest(\n          this.repositoryName,\n          digest,\n          updatedOptions\n        );\n      }\n    );\n  }\n\n  /**\n   * Upload an artifact blob.\n   *\n   * @param blobStream - the stream containing the blob data.\n   */\n  public async uploadBlob(\n    blob: NodeJS.ReadableStream | Buffer,\n    options: UploadBlobOptions = {}\n  ): Promise<UploadBlobResult> {\n    return tracingClient.withSpan(\n      \"ContainerRegistryContentClient.uploadBlob\",\n      options,\n      async (updatedOptions) => {\n        const blobStream = Buffer.isBuffer(blob) ? Readable.from(blob) : blob;\n\n        const startUploadResult = await this.client.containerRegistryBlob.startUpload(\n          this.repositoryName,\n          updatedOptions\n        );\n\n        assertHasProperty(startUploadResult, \"location\");\n        let location = startUploadResult.location.substring(1);\n\n        const chunks = readChunksFromStream(blobStream, CHUNK_SIZE);\n        const hash = crypto.createHash(\"sha256\");\n\n        let bytesUploaded = 0;\n\n        for await (const chunk of chunks) {\n          hash.write(chunk);\n          const result = await this.client.containerRegistryBlob.uploadChunk(\n            location,\n            chunk,\n            updatedOptions\n          );\n\n          bytesUploaded += chunk.byteLength;\n\n          assertHasProperty(result, \"location\");\n          location = result.location.substring(1);\n        }\n\n        hash.end();\n        const digest = `sha256:${hash.digest(\"hex\")}`;\n\n        const { dockerContentDigest: digestFromResponse } =\n          await this.client.containerRegistryBlob.completeUpload(digest, location, updatedOptions);\n\n        if (digest !== digestFromResponse) {\n          throw new DigestMismatchError(\n            \"Digest of blob to upload does not match the digest from the server.\"\n          );\n        }\n\n        return { digest, sizeInBytes: bytesUploaded };\n      }\n    );\n  }\n\n  /**\n   * Download a blob that is part of an artifact.\n   *\n   * @param digest - the digest of the blob to download\n   * @param options - optional configuration used to send requests to the service\n   * @returns - the downloaded blob\n   */\n  public async downloadBlob(\n    digest: string,\n    options: DownloadBlobOptions = {}\n  ): Promise<DownloadBlobResult> {\n    return tracingClient.withSpan(\n      \"ContainerRegistryContentClient.downloadBlob\",\n      options,\n      async (updatedOptions) => {\n        const initialResponse = await this.client.containerRegistryBlob.getBlob(\n          this.repositoryName,\n          digest,\n          updatedOptions\n        );\n\n        assertHasProperty(initialResponse, \"readableStreamBody\");\n        assertHasProperty(initialResponse, \"contentLength\");\n\n        const hash = crypto.createHash(\"sha256\");\n\n        return {\n          digest,\n          content: new RetriableReadableStream(\n            initialResponse.readableStreamBody,\n            async (pos) => {\n              const retryResponse = await this.client.containerRegistryBlob.getChunk(\n                this.repositoryName,\n                digest,\n                `${pos}-`,\n                updatedOptions\n              );\n\n              assertHasProperty(retryResponse, \"readableStreamBody\");\n              return retryResponse.readableStreamBody;\n            },\n            0,\n            initialResponse.contentLength,\n            {\n              onData: (data) => hash.write(data),\n              onEnd: () => {\n                hash.end();\n                const calculatedDigest = `sha256:${hash.digest(\"hex\")}`;\n\n                if (digest !== calculatedDigest) {\n                  throw new DigestMismatchError(\n                    \"Digest calculated from downloaded blob content does not match digest requested.\"\n                  );\n                }\n              },\n            }\n          ),\n        };\n      }\n    );\n  }\n}\n"],"names":["createClientLogger","RepositoryWriteablePropertiesMapper","TagWriteablePropertiesMapper","ManifestWriteablePropertiesMapper","serializer","coreClient","Mappers.AcrErrors","Parameters.url","Parameters.accept","Mappers.ContainerRegistryGetManifestHeaders","Parameters.name","Parameters.reference","Parameters.accept1","Mappers.ContainerRegistryCreateManifestHeaders","Parameters.payload","Parameters.accept2","Parameters.contentType","Mappers.Repositories","Mappers.ContainerRegistryGetRepositoriesHeaders","Parameters.last","Parameters.n","Parameters.apiVersion","Mappers.ContainerRepositoryProperties","Parameters.value","Parameters.contentType1","Mappers.TagList","Mappers.ContainerRegistryGetTagsHeaders","Parameters.orderby","Parameters.digest","Mappers.ArtifactTagProperties","Parameters.value1","Mappers.AcrManifests","Mappers.ContainerRegistryGetManifestsHeaders","Mappers.ArtifactManifestProperties","Parameters.digest1","Parameters.value2","Mappers.ContainerRegistryGetRepositoriesNextHeaders","Parameters.nextLink","Mappers.ContainerRegistryGetTagsNextHeaders","Mappers.ContainerRegistryGetManifestsNextHeaders","Mappers.ContainerRegistryBlobGetBlobHeaders","Parameters.accept3","Mappers.ContainerRegistryBlobCheckBlobExistsHeaders","Mappers.ContainerRegistryBlobDeleteBlobHeaders","Mappers.ContainerRegistryBlobMountBlobHeaders","Parameters.fromParam","Parameters.mount","Mappers.ContainerRegistryBlobGetUploadStatusHeaders","Parameters.nextLink1","Mappers.ContainerRegistryBlobUploadChunkHeaders","Parameters.value3","Parameters.contentType2","Mappers.ContainerRegistryBlobCompleteUploadHeaders","Parameters.value4","Parameters.digest2","Mappers.ContainerRegistryBlobStartUploadHeaders","Mappers.ContainerRegistryBlobGetChunkHeaders","Parameters.range","Mappers.ContainerRegistryBlobCheckChunkExistsHeaders","Mappers.AcrRefreshToken","Parameters.grantType","Parameters.service","Parameters.tenant","Parameters.refreshToken","Parameters.accessToken","Parameters.contentType3","Parameters.accept4","Mappers.AcrAccessToken","Parameters.scope","Parameters.refreshToken1","Parameters.grantType1","createTracingClient","__asyncValues","__await","__asyncDelegator","LATEST_API_VERSION","isTokenCredential","bearerTokenAuthenticationPolicy","KnownContainerRegistryAudience","KnownArtifactArchitecture","KnownArtifactOperatingSystem","KnownManifestMediaType","crypto","Readable","AbortError","RestError"],"mappings":"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"}